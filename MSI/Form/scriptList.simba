var
  ScriptElements: array of TIntegerArray;
  ElementIndexes: TIntegerArray;

procedure setScriptListElements();
var
  i: integer;
begin
  setLength(ScriptElements, SKILL_COUNT);
  setLength(ElementIndexes, SKILL_COUNT);

  for i := 0 to high(MSI_Scripts) do
  begin
    if (MSI_Scripts[i].Name = '') then
      continue;

    with MSI_Scripts[i] do
    begin
      setLength(ScriptElements[skillConst], length(ScriptElements[skillConst]) + 1);
      ScriptElements[skillConst][high(ScriptElements[skillConst])] := constant;
    end;
  end;
end;

procedure modifyElement(element: integer; expand: boolean);
var
  c, i, j: integer;
begin
  for i := 0 to high(ScriptElements) do
  begin
    if (length(ScriptElements[i]) <= 0) then
      continue;

    if (element = ElementIndexes[i]) then
      with Lists[LIST_ALL_SCRIPTS] do
      begin
        if (expand) then
          Items.Strings[ElementIndexes[i] - 1] := '-   ' + skillToStr(i)
        else
          Items.Strings[ElementIndexes[i] - 1] := '+  ' + skillToStr(i);

        c := 0;

        for j := high(ScriptElements[i]) downto 0 do
        begin
          if (expand) then
            Items.Insert(element, '         ' + capitalize(MSI_Scripts[ScriptElements[i][j]].Name))
          else
            Items.Delete(element);

          inc(c);
        end;

        continue;
      end;

    if (expand) then
      incEx(ElementIndexes[i], c)
    else
      decEx(ElementIndexes[i], c);
  end;
end;

procedure clickListElement(Sender: TObject);
var
  e: integer;
begin
  e := getListSelected(Lists[LIST_ALL_SCRIPTS]);

  if (pos('+', Lists[LIST_ALL_SCRIPTS].Items.Strings[e]) > 0) then
    modifyElement(e + 1, true)
  else
    if (pos('-', Lists[LIST_ALL_SCRIPTS].Items.Strings[e]) > 0) then
      modifyElement(e + 1, false);
end;

procedure dblClickListElement(Sender: TObject);
var
  e: integer;
begin
  e := getListSelected(Lists[LIST_ALL_SCRIPTS]);

  // if one of the expandable options (i.e. skill titles)
  if (pos('+', Lists[LIST_ALL_SCRIPTS].Items.Strings[e]) = 1) or
     (pos('-', Lists[LIST_ALL_SCRIPTS].Items.Strings[e]) = 1) then exit;

  // add the splected script to the player's script list
  if (not inList(Lists[LIST_PLAYER_SCRIPTS], removePreSpaces(Lists[LIST_ALL_SCRIPTS].Items.Strings[e]))) then
    Lists[LIST_PLAYER_SCRIPTS].Items.Add(
      removePreSpaces(Lists[LIST_ALL_SCRIPTS].Items.Strings[e])
    );

  Forms[FORM_SCRIPT_LIST].Visible := false;
  Buttons[BUTTON_SCRIPT_DELETE].Enabled := true;
end;

procedure createScriptList();
var
  i: integer;
begin
  Forms[FORM_SCRIPT_LIST] := TForm.Create(Forms[FORM_MAIN]);
  with Forms[FORM_SCRIPT_LIST] do
  begin
    Width   := 300;
    Height  := 400;
    Caption := 'MSI''s Supported Scripts';
  end;

  Lists[LIST_ALL_SCRIPTS] := TListBox.Create(Forms[FORM_SCRIPT_LIST]);
  with Lists[LIST_ALL_SCRIPTS] do
  begin
    Parent := Forms[FORM_SCRIPT_LIST];
    Top    := 0;
    Left   := 0;
    Width  := Forms[FORM_SCRIPT_LIST].Width;
    Height := Forms[FORM_SCRIPT_LIST].Height - 40;
    Color  := COLOR_BACKGROUND;
    Hint   := 'Select which script you want to Add';

    Font.Color := COLOR_FONT;
    OnClick := @clickListElement;
    OnDblClick := @dblClickListElement;
  end;

  setScriptListElements();
  for i := 0 to high(ScriptElements) do
  begin
    ElementIndexes[i] := -1;

    if (length(ScriptElements[i]) <= 0) then
      continue;

    Lists[LIST_ALL_SCRIPTS].Items.Add('+  ' + skillToStr(i));
    ElementIndexes[i] := Lists[LIST_ALL_SCRIPTS].Items.Count;
  end;

  Buttons[BUTTON_SCRIPT_LIST_ADD] := _TButton(Forms[FORM_SCRIPT_LIST]);
  with Buttons[BUTTON_SCRIPT_LIST_ADD] do
  begin
    Parent  := Lists[LIST_ALL_SCRIPTS].Parent;
    Width   := 60;
    Top     := (Lists[LIST_ALL_SCRIPTS].Height + 7);
    Left    := Forms[FORM_SCRIPT_LIST].Width / 2 - (Width + (_SPACING / 2));
    Hint    := 'Adds the selected script to the player''s script list';
    Caption := 'Add';
    OnClick := @dblClickListElement;
  end;

  Buttons[BUTTON_SCRIPT_LIST_CANCEL] := _TButton(Forms[FORM_SCRIPT_LIST]);
  with Buttons[BUTTON_SCRIPT_LIST_CANCEL] do
  begin
    Parent  := Lists[LIST_ALL_SCRIPTS].Parent;
    Width   := Buttons[BUTTON_SCRIPT_LIST_ADD].Width;
    Top     := Buttons[BUTTON_SCRIPT_LIST_ADD].Top;
    Left    := Forms[FORM_SCRIPT_LIST].Width / 2 + (_SPACING / 2);
    Hint    := 'Close script list without saving';
    Caption := 'Cancel';
  end;
end;
