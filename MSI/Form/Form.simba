
const
  // for Username/Password/Pin/etc.
  PLAYER_SPACING         = 15;  // spacing between components
  PLAYER_COMPONENT_LEFT  = 110; // pixels from right edge of lists[LST_PLAYERS]
  PLAYER_LST_WIDTH      = 155;
  HEIGHT_MNU            = 20; // the main menu is X pixels in height
  WIDTH_EDTS            = 100; // width of TEdits

  HEIGHT_TEXT_COMPONENTS = 20;
  CENTER_LBLS          = 3; // pixels needed to centre labels in components

  //COLOR_BACKGROUND       = 1909544;
  //COLOR_FONT             = 2070783;
  COLOR_BACKGROUND       = clDefault;
  COLOR_FONT             = clBlack;

// component constants
const
  FRM_COUNT = 4;
    FRM_MAIN            = 1;
    FRM_SETTINGS_PLAYER = 2;
    FRM_SCRIPT_SETUP    = 3;
    FRM_SCRIPT_LST     = 4;

  MNU_COUNT = 4;
    MNU_FILE = 1;
      ITM_NEW   = 1;
      ITM_LOAD  = 2;
      ITM_SAVE  = 3;
      ITM_CLOSE = 4;

    MNU_START = 2;
      ITM_MAIN = 1;
      ITM_RUN  = 2;

    MNU_FEEDBACK = 3;
      ITM_BUG        = 1;
      ITM_SUGGESTION = 2;
      ITM_REPORTS    = 3;
      ITM_CONTRIBUTE = 4;

    MNU_HELP = 4;
      ITM_FORUM = 1;
      ITM_HELP  = 2;
      ITM_DOC   = 3;
      ITM_ABOUT = 4;

  PNL_COUNT = 3;
    PNL_MAIN     = 1;
    PNL_PLAYER   = 2;
    PNL_SETTINGS = 3;

  LST_COUNT = 3;
    LST_PLAYERS        = 1;
    LST_PLAYER_SCRIPTS = 2;
    LST_ALL_SCRIPTS    = 3;

  CHKLST_COUNT = 1;
    CHKLST_REWARDS = 1;

  EDT_COUNT = 9;
    EDT_LOGIN       = 1;
    EDT_ALIAS       = 2;
    EDT_PASSWORD    = 3;
    EDT_PIN         = 4;
    EDT_TIME_BREAK  = 5;
    EDT_TIME_TOTAL  = 6;
    EDT_LOADS_BREAK = 7;
    EDT_LOADS_TOTAL = 8;
    EDT_BREAK_FOR   = 9;

  CBO_COUNT = 3;
    CBO_ACTIVE    = 1;
    CBO_MEMBER    = 2;
    CBO_LAMPSKILL = 3;

  CHK_COUNT = 2;
    CHK_SHOW_PASSWORD = 1;
    CHK_SHOW_PIN      = 2;

  BTN_COUNT = 13;
    BTN_CONTINUE          = 1;
    BTN_SETTINGS          = 2;
    BTN_PLAYER            = 3;
    BTN_PLAYER_ADD        = 4;
    BTN_PLAYER_DELETE     = 5;
    BTN_PLAYER_SAVE       = 6;
    BTN_PLAYER_CANCEL     = 7;
    BTN_SCRIPT_ADD        = 8;
    BTN_SCRIPT_DELETE     = 9;
    BTN_SCRIPT_SETTINGS   = 10;
    BTN_SCRIPT_LST_ADD    = 11;
    BTN_SCRIPT_LST_CANCEL = 12;
    BTN_ADVANCED_PLAYER   = 13;

  LBL_COUNT = 19;
    LBL_PLAYERS     = 1;
    LBL_SCRIPTS     = 2;
    LBL_USERNAME    = 3;
    LBL_ALIAS       = 4;
    LBL_PASSWORD    = 5;
    LBL_PIN         = 6;
    LBL_ACTIVE      = 7;
    LBL_MEMBER      = 8;
    LBL_TIME_TOTAL  = 9;
    LBL_TIME_BREAK  = 10;
    LBL_LOADS_TOTAL = 11;
    LBL_LOADS_BREAK = 12;
    LBL_BREAK_FOR   = 13;
    LBL_LAMPSKILL   = 14;
    LBL_REWARDS     = 15;
    LBL_TITLE       = 16;
    LBL_SHOW_PSWD   = 17;
    LBL_SHOW_PIN    = 18;
    LBL_REQUIRED    = 19;

// Other variables
var
  MSI_Ready: Boolean;

// Form components
var
  forms: array[1..FRM_COUNT] of TForm;

  mainMenu: TMainMenu;
  mainMenuItems: array[1..MNU_COUNT] of array of TMenuItem;

  panels     : array[1..PNL_COUNT] of TPanel;
  lists      : array[1..LST_COUNT] of TListBox;
  edits      : array[1..EDT_COUNT] of TEdit;
  labels     : array[1..LBL_COUNT] of TLabel;
  comboBoxes : array[1..CBO_COUNT] of TComboBox;
  buttons    : array[1..BTN_COUNT] of TButton;
  checkBoxes : array[1..CHK_COUNT] of TCheckBox;
  checkLists : array[1..CHKLST_COUNT] of TCheckListBox;

  openDialog: TOpenDialog;
  saveDialog: TSaveDialog;

// Prevents people from typing in combo boxes
// Set to TComboBox.OnKeyPress
procedure preventTyping(sender: TObject; var key: char);
begin
  key := chr(VK_CANCEL);
end;

function skillToStr(skill: integer): string;
begin
  case skill of
    SKILL_NONE: result := 'Miscellaneous';
    SKILL_ATTACK: result := 'Attack';
    SKILL_DEFENCE: result := 'Defence';
    SKILL_STRENGTH: result := 'Strength';
    SKILL_HITPOINTS, SKILL_HP: result := 'Constitution';
    SKILL_RANGE: result := 'Range';
    SKILL_PRAYER: result := 'Prayer';
    SKILL_MAGIC: result := 'Magic';
    SKILL_COOKING: result := 'Cooking';
    SKILL_WOODCUTTING: result := 'Woodcutting';
    SKILL_FLETCHING: result := 'Fletching';
    SKILL_FISHING: result := 'Fishing';
    SKILL_FIREMAKING: result := 'Firemaking';
    SKILL_CRAFTING: result := 'Crafting';
    SKILL_SMITHING: result := 'Smithing';
    SKILL_MINING: result := 'Mining';
    SKILL_HERBLORE: result := 'Herblore';
    SKILL_AGILITY: result := 'Agility';
    SKILL_THIEVING: result := 'Thieving';
    SKILL_SLAYER: result := 'Slayer';
    SKILL_FARMING: result := 'Farming';
    SKILL_RUNECRAFTING: result := 'Runecrafting';
    SKILL_HUNTER: result := 'Hunter';
    SKILL_CONSTRUCTION: result := 'Construction';
    SKILL_SUMMONING: result := 'Summoning';
    SKILL_DUNGEONEERING: result := 'Dungeoneering';

    else
      MSI_SubDebug('[FRM]: Invalid skill in skillToString');
  end;
end;

type
  TSkillForm = record
    name: integer;
    numberOfLists, numberOfEdits, numberOfCombos: integer;
    labelsLists, labelsEdits, labelsCombos: TStringArray;
    skillLists: array of TCheckListBox;
    skillEdits: array of TEdit;
    skillCombos: array of TComboBox;
  end;

function getSkillForm(skill: integer): TSkillForm;
begin
  case skill of
    SKILL_WOODCUTTING: ;
    SKILL_MINING: ;
    SKILL_FISHING: ;
    SKILL_COOKING: ;
    SKILL_MAGIC: ;
    SKILL_NONE: ;

    else
      MSI_SubDebug('[FRM] Invalid skill in getSkillForm');
  end;
end;

procedure createSkillForm(skill: integer);
begin
end;

procedure mainMenuClicks(sender: TObject);
begin
  case sender of
    mainMenuItems[MNU_FILE][ITM_NEW]:
      begin
      end;

    mainMenuItems[MNU_FILE][ITM_LOAD]:
      begin
        if (openDialog.Execute) then
        begin
          // Code to load all player information here
          edits[EDT_LOGIN].text := ReadINI('0', 'Test', openDialog.FileName);
        end;
      end;

    mainMenuItems[MNU_FILE][ITM_SAVE]:
      begin
        if (saveDialog.Execute) then
        begin
          // Code to save all player information here
          writeINI('0', 'Test', edits[EDT_LOGIN].text, saveDialog.FileName);
        end;
      end;

    mainMenuItems[MNU_FILE][ITM_CLOSE]:
      forms[FRM_MAIN].modalResult := mrOk;

    mainMenuItems[MNU_START][ITM_RUN]:
      begin
        MSI_Ready := true;
        forms[FRM_MAIN].modalResult := mrOk;
      end;

    mainMenuItems[MNU_FEEDBACK][ITM_BUG]:
      openWebPage('http://villavu.com/forum/forumdisplay.php?f=412');

    mainMenuItems[MNU_FEEDBACK][ITM_SUGGESTION]:
      openWebPage('http://villavu.com/forum/forumdisplay.php?f=413');

    mainMenuItems[MNU_FEEDBACK][ITM_REPORTS]:
      openWebPage('http://villavu.com/forum/showthread.php?t=56134');

    mainMenuItems[MNU_FEEDBACK][ITM_CONTRIBUTE]:
      openWebPage('http://villavu.com/forum/showthread.php?t=56179');

    mainMenuItems[MNU_START][ITM_MAIN]:
      begin
        panels[PNL_PLAYER].visible := false;
        panels[PNL_SETTINGS].visible := false;
        panels[PNL_MAIN].visible := true;
      end;

    mainMenuItems[MNU_HELP][ITM_FORUM]:
      openWebPage('http://villavu.com/forum/index.php');

    mainMenuItems[MNU_HELP][ITM_HELP]:
      openWebPage('http://villavu.com/forum/showthread.php?t=57723');

    mainMenuItems[MNU_HELP][ITM_DOC]:
      openWebPage('http://docs.wizzup.org/msi/index.html#');

    mainMenuItems[MNU_HELP][ITM_ABOUT]:
      openWebPage('http://villavu.com/forum/showthread.php?t=56614');
  end;
end;

// Credit to Dan Cardin (http://villavu.com/forum/showthread.php?t=39078)
procedure mainMenuCreate();
var
  i, j: integer;
  mainMenuNames: array[1..MNU_COUNT] of TStringArray;
begin
  // The first one ('File') is the heading, the rest are sub-options
  mainMenuNames[MNU_FILE] := ['File', 'Clear', 'Load', 'Save', 'Close'];
  mainMenuNames[MNU_START] := ['Start', 'Show Logo', 'Run'];
  mainMenuNames[MNU_FEEDBACK] := ['Feedback', 'Report a bug', 'Suggest a feature', 'Progress Reports', 'Want to contribute?'];
  mainMenuNames[MNU_HELP] := ['Help', 'SRL-Forums', 'MSI Help', 'Documentation', 'What is MSI?'];

  mainMenu := TMainMenu.create(forms[FRM_MAIN]);

  for i := low(mainMenuItems) to high(mainMenuItems) do
  begin
    setLength(mainMenuItems[i], length(mainMenuNames[i]));

    for j := low(mainMenuItems[i]) to high(mainMenuItems[i]) do
    begin
      mainMenuItems[i][j] := TMenuItem.create(forms[FRM_MAIN]);
      mainMenuItems[i][j].caption := mainMenuNames[i][j];

      if (j = low(mainMenuItems[i])) then
        mainMenu.items.add(mainMenuItems[i][j])
      else
        mainMenu.items.items[i - 1].add(mainMenuItems[i][j]);

      mainMenuItems[i][j].onClick := @mainMenuClicks;
    end;
  end;
end;

procedure scriptListClicks(sender: TObject);
begin
  case sender of
    lists[LST_ALL_SCRIPTS], buttons[BTN_SCRIPT_LST_ADD]:
      with lists[LST_ALL_SCRIPTS] do
      begin
      end;

    buttons[BTN_SCRIPT_LST_CANCEL]:
      forms[FRM_SCRIPT_LST].visible := false;
  end;
end;

procedure scriptListCreate();
var
  i, j: integer;
  scripts: array of TIntegerArray;
begin
  setLength(scripts, SKILL_COUNT);

  for i := 0 to high(MSI_Scripts) do
  begin
    if (MSI_Scripts[i].name = '') then
      continue;

    with MSI_Scripts[i] do
    begin
      setLength(scripts[skillConst], length(scripts[skillConst]) + 1);
      scripts[skillConst][high(scripts[skillConst])] := constant;
    end;
  end;

  forms[FRM_SCRIPT_LST] := TForm.create(forms[FRM_MAIN]);
  with forms[FRM_SCRIPT_LST] do
  begin
    width := 400;
    height := 410;
    caption := 'MSI''s Supported Scripts';
  end;

  lists[LST_ALL_SCRIPTS] := TListBox.create(forms[FRM_SCRIPT_LST]);
  with lists[LST_ALL_SCRIPTS] do
  begin
    parent := forms[FRM_SCRIPT_LST];
    setBounds(0, 0, forms[FRM_SCRIPT_LST].width, forms[FRM_SCRIPT_LST].height - 40);
    hint := 'Select which script you want to add';
    color := COLOR_BACKGROUND;
    font.color := COLOR_FONT;
    columns := 2;
    onDblClick := @scriptListClicks;
  end;

  for i := 0 to high(scripts) do
  begin
    if (length(scripts[i]) <= 0) then
      continue;

    with lists[LST_ALL_SCRIPTS] do
    begin
      items.add(skillToStr(i));
      for j := 0 to high(scripts[i]) do
        items.add('     ' + MSI_Scripts[scripts[i][j]].name);
      items.add('');
    end;
  end;

  buttons[BTN_SCRIPT_LST_ADD] := TButton.create(forms[FRM_SCRIPT_LST]);
  with buttons[BTN_SCRIPT_LST_ADD] do
  begin
    parent := lists[LST_ALL_SCRIPTS].parent;
    width := 100;
    top := (lists[LST_ALL_SCRIPTS].height + 7);
    left := 90;
    hint := 'Adds the selected script to the player''s script list';
    caption := 'Add';
    onClick := @scriptListClicks;
  end;

  buttons[BTN_SCRIPT_LST_CANCEL] := TButton.create(forms[FRM_SCRIPT_LST]);
  with buttons[BTN_SCRIPT_LST_CANCEL] do
  begin
    parent := lists[LST_ALL_SCRIPTS].parent;
    width := buttons[BTN_SCRIPT_LST_ADD].width;
    top := buttons[BTN_SCRIPT_LST_ADD].top;
    left := (buttons[BTN_SCRIPT_LST_ADD].left + buttons[BTN_SCRIPT_LST_ADD].width + 10);
    hint := 'Close script list without saving';
    caption := 'Cancel';
    onClick := @scriptListClicks;
  end;
end;

function getListSelected(list: TListBox): integer;
var
  i: integer;
begin
  for i := 0 to high(list.items.Count - 1) do
    if (List.SELECTED[i]) then
    begin
      Result := i;
      Break;
    end;
end;

procedure onDblClicks(sender: TObject);
var
  i: integer;
begin
  case sender of
    lists[LST_PLAYERS], buttons[BTN_ADVANCED_PLAYER]:
      begin
        i := getListSelected(lists[LST_PLAYERS]);
        forms[FRM_SETTINGS_PLAYER].caption := lists[LST_PLAYERS].items.Strings[i] + '''s Advanced Settings (optional)';
        forms[FRM_SETTINGS_PLAYER].visible := true;
      end;
  end;
end;

procedure onClicks(sender: TObject);
var
  i: integer;
begin
  case sender of
    lists[LST_PLAYERS]:
      begin
        i := getListSelected(lists[LST_PLAYERS]);
        labels[LBL_SCRIPTS].caption := lists[LST_PLAYERS].items.strings[i] + '''s Scripts';
        buttons[BTN_ADVANCED_PLAYER].enabled := true;
      end;

    buttons[BTN_CONTINUE]:
      begin
        buttons[BTN_PLAYER].enabled := true;
        buttons[BTN_SETTINGS].enabled := false;

        panels[PNL_MAIN].visible := false;
        panels[PNL_SETTINGS].visible := true;

        labels[LBL_TITLE].caption := 'Script Settings';
      end;

    buttons[BTN_SETTINGS]:
      begin
        buttons[BTN_PLAYER].enabled := true;
        buttons[BTN_SETTINGS].enabled := false;

        panels[PNL_PLAYER].visible := false;
        panels[PNL_SETTINGS].visible := true;

        labels[LBL_TITLE].caption := 'Script Settings';
      end;

    buttons[BTN_PLAYER]:
      begin
        buttons[BTN_PLAYER].enabled := false;
        buttons[BTN_SETTINGS].enabled := true;

        panels[PNL_PLAYER].visible := true;
        panels[PNL_SETTINGS].visible := false;

        labels[LBL_TITLE].caption := 'Player Settings';
      end;

    buttons[BTN_PLAYER_CANCEL]:
      forms[FRM_SETTINGS_PLAYER].visible := false;

    buttons[BTN_SCRIPT_ADD]:
      forms[FRM_SCRIPT_LST].visible := true;

    buttons[BTN_SCRIPT_SETTINGS]:
      forms[FRM_SCRIPT_SETUP].visible := true;

    checkBoxes[CHK_SHOW_PASSWORD]:
      begin
        if (checkBoxes[CHK_SHOW_PASSWORD].checked) then
          edits[EDT_PASSWORD].passwordChar := #0
        else
          edits[EDT_PASSWORD].passwordChar := '*';

        edits[EDT_PASSWORD].refresh();
      end;

    checkBoxes[CHK_SHOW_PIN]:
      begin
        if (checkBoxes[CHK_SHOW_PIN].checked) then
          edits[EDT_PIN].passwordChar := #0
        else
          edits[EDT_PIN].passwordChar := '*';

        edits[EDT_PIN].refresh();
      end;
  end;
end;

procedure onPaints(sender: TObject);
begin
  with TForm(sender) do
    with canvas do
    begin
      moveTo(10, (panels[PNL_PLAYER].top - 3));
      lineTo((width - 10), (panels[PNL_PLAYER].top - 3));
    end;
end;

procedure initIntro();
begin
  buttons[BTN_CONTINUE] := TButton.create(forms[FRM_MAIN]);
  with buttons[BTN_CONTINUE] do
  begin
    parent := panels[PNL_MAIN];
    caption := 'Continue >>';
    width := 100;
    top := (parent.height - 55);
    left := (parent.width - (width + 10));
    hint := 'Click to continue to setup MSI';
  end;
end;

procedure initScriptSetup();
begin
end;

procedure initPlayerAdvanced();
var
  i: integer;
  s: TStringArray;
begin
  forms[FRM_SETTINGS_PLAYER] := TForm.create(forms[FRM_MAIN]);
  with forms[FRM_SETTINGS_PLAYER] do
  begin
    width := 405;
    height := 270;
    visible := false;
  end;

  edits[EDT_TIME_TOTAL] := TEdit.create(forms[FRM_SETTINGS_PLAYER]);
  with edits[EDT_TIME_TOTAL] do
  begin
    parent := forms[FRM_SETTINGS_PLAYER];
    top := PLAYER_SPACING;
    left := 110;
    hint := 'The total time for this player to run in minutes (combines '+#13+#10+
            'the time from each script).  Leave at 0 to run forever.';
    text := '0';
  end;

  edits[EDT_TIME_BREAK] := TEdit.create(forms[FRM_SETTINGS_PLAYER]);
  with edits[EDT_TIME_BREAK] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    top := (edits[EDT_TIME_TOTAL].top + HEIGHT_TEXT_COMPONENTS + PLAYER_SPACING);
    left := edits[EDT_TIME_TOTAL].left;
    hint := 'The time to run before breaking or switching players.  '+#13+#10+
            'Leave at 0 if you don''t want this player take breaks.';
    text := '0';
  end;

  edits[EDT_LOADS_TOTAL] := TEdit.create(forms[FRM_SETTINGS_PLAYER]);
  with edits[EDT_LOADS_TOTAL] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    top := (edits[EDT_TIME_BREAK].top + HEIGHT_TEXT_COMPONENTS + PLAYER_SPACING);
    left := edits[EDT_TIME_TOTAL].left;;
    hint := 'The total loads for this player to do (combines the '+#13+#10+
            'loads from each script).  Leave at 0 to run forever.';
    text := '0';
  end;

  edits[EDT_LOADS_BREAK] := TEdit.create(forms[FRM_SETTINGS_PLAYER]);
  with edits[EDT_LOADS_BREAK] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    top := (edits[EDT_LOADS_TOTAL].top + HEIGHT_TEXT_COMPONENTS + PLAYER_SPACING);
    left := edits[EDT_TIME_TOTAL].left;;
    hint := 'The loads to do before breaking or switching players.  '+#13+#10+
            'Leave at 0 if you don''t want to take breaks.';
    text := '0';
  end;

  edits[EDT_BREAK_FOR] := TEdit.create(forms[FRM_SETTINGS_PLAYER]);
  with edits[EDT_BREAK_FOR] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    top := (edits[EDT_LOADS_BREAK].top + HEIGHT_TEXT_COMPONENTS + PLAYER_SPACING);
    left := edits[EDT_TIME_TOTAL].left;;
    hint := 'How long for this player to break for (in minutes) if taking breaks.  ' +#13+#10+
            'This is only used for single player or if there''s one player active';
    text := '60';
  end;

  comboBoxes[CBO_LAMPSKILL] := TComboBox.create(forms[FRM_SETTINGS_PLAYER]);
  with comboBoxes[CBO_LAMPSKILL] do
  begin
    parent := edits[EDT_LOADS_TOTAL].parent;
    top := (edits[EDT_BREAK_FOR].top + HEIGHT_TEXT_COMPONENTS + PLAYER_SPACING);
    left := edits[EDT_TIME_TOTAL].left;
    hint := 'Choose the skill you want to gain from experience lamps';
    text := 'Mining';

    for i := 0 to (SKILL_COUNT - 2) do
      items.add(lowercase(skillToStr(i)));
  end;

  labels[LBL_TIME_TOTAL] := TLabel.create(forms[FRM_SETTINGS_PLAYER]);
  with labels[LBL_TIME_TOTAL] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    caption := 'Total time';
    top := (edits[EDT_TIME_TOTAL].top + CENTER_LBLS);
    left := (edits[EDT_TIME_TOTAL].left - 90);
  end;

  labels[LBL_TIME_BREAK] := TLabel.create(forms[FRM_SETTINGS_PLAYER]);
  with labels[LBL_TIME_BREAK] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    caption := 'Break time';
    top := (edits[EDT_TIME_BREAK].top + CENTER_LBLS);
    left := labels[LBL_TIME_TOTAL].left;
  end;

  labels[LBL_LOADS_TOTAL] := TLabel.create(forms[FRM_SETTINGS_PLAYER]);
  with labels[LBL_LOADS_TOTAL] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    caption := 'Total loads';
    top := (edits[EDT_LOADS_TOTAL].top + CENTER_LBLS);
    left := labels[LBL_TIME_BREAK].left;
  end;

  labels[LBL_LOADS_BREAK] := TLabel.create(forms[FRM_SETTINGS_PLAYER]);
  with labels[LBL_LOADS_BREAK] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    caption := 'Break loads';
    top := (edits[EDT_LOADS_BREAK].top + CENTER_LBLS);
    left := labels[LBL_TIME_BREAK].left;
  end;

  labels[LBL_BREAK_FOR] := TLabel.create(forms[FRM_SETTINGS_PLAYER]);
  with labels[LBL_BREAK_FOR] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    caption := 'Break for';
    top := (edits[EDT_BREAK_FOR].top + CENTER_LBLS);
    left := labels[LBL_TIME_BREAK].left;
  end;

  labels[LBL_LAMPSKILL] := TLabel.create(forms[FRM_SETTINGS_PLAYER]);
  with labels[LBL_LAMPSKILL] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    caption := 'Lamp skill';
    top := (comboBoxes[CBO_LAMPSKILL].top + CENTER_LBLS);
    left := labels[LBL_TIME_BREAK].left;
  end;

  labels[LBL_REWARDS] := TLabel.create(forms[FRM_SETTINGS_PLAYER]);
  with labels[LBL_REWARDS] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    caption := 'Reward box rewards';
    top := edits[EDT_TIME_TOTAL].top;
    left := (edits[EDT_TIME_BREAK].left + edits[EDT_TIME_BREAK].width + 40);
  end;

  checkLists[CHKLST_REWARDS] := TCheckListBox.create(forms[FRM_SETTINGS_PLAYER]);
  with checkLists[CHKLST_REWARDS] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    hint := 'Check off the rewards you want from random events (XP is default)';
    left := labels[LBL_REWARDS].left;
    top := (labels[LBL_REWARDS].top + labels[LBL_REWARDS].height);
    width := PLAYER_LST_WIDTH;
    height := (comboBoxes[CBO_LAMPSKILL].top + comboBoxes[CBO_LAMPSKILL].height - top);
    showHint := true;
    s := ['XP Lamp', 'Costume', 'Coins', 'Gem', 'Clay Ore', 'Coal Ore',
          'Mystery Box', 'Emote'];
    for i := 0 to high(s) do
      items.add(s[i]);
  end;

  buttons[BTN_PLAYER_SAVE] := TButton.create(forms[FRM_SETTINGS_PLAYER]);
  with buttons[BTN_PLAYER_SAVE] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    caption := 'Save';
    hint := 'Save the player''s settings';
    width := 100;
    top := (comboBoxes[CBO_LAMPSKILL].top + comboBoxes[CBO_LAMPSKILL].height + PLAYER_SPACING);
    left := 95;
  end;

  buttons[BTN_PLAYER_CANCEL] := TButton.create(forms[FRM_SETTINGS_PLAYER]);
  with buttons[BTN_PLAYER_CANCEL] do
  begin
    parent := edits[EDT_TIME_TOTAL].parent;
    caption := 'Cancel';
    hint := 'Cancel without saving player''s settings';
    width := buttons[BTN_PLAYER_SAVE].width;
    top := buttons[BTN_PLAYER_SAVE].top;
    left := (buttons[BTN_PLAYER_SAVE].left + buttons[BTN_PLAYER_SAVE].width + PLAYER_SPACING);
  end;
end;

procedure initPlayerSetup();
var
  i: integer;
begin
  lists[LST_PLAYERS] := TListBox.create(panels[PNL_PLAYER]);
  with lists[LST_PLAYERS] do
  begin
    parent := panels[PNL_PLAYER];
    top := 10 + PLAYER_SPACING;
    width := PLAYER_LST_WIDTH;
    left := PLAYER_SPACING;
    hint := 'A list of all your players.  Double click to open advanded settings.';
    height := (panels[PNL_PLAYER].height - lists[LST_PLAYERS].top - 55);
    for i := 1 to 10 do
      items.add(intToStr(i));
    onDblClick := @onDblClicks;
    onClick := @onClicks;
  end;

  buttons[BTN_ADVANCED_PLAYER] := TButton.create(forms[FRM_MAIN]);
  with buttons[BTN_ADVANCED_PLAYER] do
  begin
    parent := lists[LST_PLAYERS].parent;
    width := lists[LST_PLAYERS].width;
    top := (lists[LST_PLAYERS].top + lists[LST_PLAYERS].height + PLAYER_SPACING);
    left := lists[LST_PLAYERS].left;
    hint := 'Opens an advanced settings window for the selected player';
    caption := 'Advanced Player Settings';
    font.size := 8;
    enabled := false;
    onClick := @onDblClicks;
  end;

  labels[LBL_PLAYERS] := TLabel.create(forms[FRM_MAIN]);
  with labels[LBL_PLAYERS] do
  begin
    parent := lists[LST_PLAYERS].parent;
    caption := 'Player List';
    top := (lists[LST_PLAYERS].top - labels[LBL_PLAYERS].height);
    left := lists[LST_PLAYERS].left;
  end;

  edits[EDT_LOGIN] := TEdit.create(forms[FRM_MAIN]);
  with edits[EDT_LOGIN] do
  begin
    parent := lists[LST_PLAYERS].parent;
    top := lists[LST_PLAYERS].top;
    left := (lists[LST_PLAYERS].left + lists[LST_PLAYERS].width + PLAYER_COMPONENT_LEFT);
    hint := 'Your Runescape login name or email';
  end;

  edits[EDT_ALIAS] := TEdit.create(forms[FRM_MAIN]);
  with edits[EDT_ALIAS] do
  begin
    parent := lists[LST_PLAYERS].parent;
    top := (edits[EDT_LOGIN].top + HEIGHT_TEXT_COMPONENTS + PLAYER_SPACING);
    left := edits[EDT_LOGIN].left;
    hint := 'Your Runescape display name';
  end;

  edits[EDT_PASSWORD] := TEdit.create(forms[FRM_MAIN]);
  with edits[EDT_PASSWORD] do
  begin
    parent := lists[LST_PLAYERS].parent;
    top := (edits[EDT_ALIAS].top + HEIGHT_TEXT_COMPONENTS + PLAYER_SPACING);
    left := edits[EDT_LOGIN].left;
    hint := 'Your Runescape password';
    passwordChar := '*';
  end;

  checkBoxes[CHK_SHOW_PASSWORD] := TCheckBox.create(panels[PNL_PLAYER]);
  with CheckBoxes[CHK_SHOW_PASSWORD] do
  begin
    parent := panels[PNL_PLAYER];
    top := (edits[EDT_PASSWORD].top + 2);
    left := (edits[EDT_PASSWORD].left + WIDTH_EDTS + 5);
    width := 15;
    height := 15;
    hint := 'Shows the player''s password';
  end;

  labels[LBL_SHOW_PSWD] := TLabel.create(panels[PNL_PLAYER]);
  with labels[LBL_SHOW_PSWD] do
  begin
    parent := panels[PNL_PLAYER];
    caption := 'Show';
    width := 25;
    font.size := 8;
    top := (checkBoxes[CHK_SHOW_PASSWORD].top + CENTER_LBLS);
    left := (checkBoxes[CHK_SHOW_PASSWORD].left + checkBoxes[CHK_SHOW_PASSWORD].width + 5);
  end;

  edits[EDT_PIN] := TEdit.create(forms[FRM_MAIN]);
  with edits[EDT_PIN] do
  begin
    parent := lists[LST_PLAYERS].parent;
    top := (edits[EDT_PASSWORD].top + HEIGHT_TEXT_COMPONENTS + PLAYER_SPACING);
    left := edits[EDT_LOGIN].left;
    hint := 'Your Runescape bank pin (leave blank if you don''t have one)';
    passwordChar := '*';
    maxLength := 4;
  end;

  checkBoxes[CHK_SHOW_PIN] := TCheckBox.create(panels[PNL_PLAYER]);
  with CheckBoxes[CHK_SHOW_PIN] do
  begin
    parent := panels[PNL_PLAYER];
    top := (edits[EDT_PIN].top + 2);
    left := (edits[EDT_PIN].left + WIDTH_EDTS + 5);
    width := 15;
    height := 15;
    hint := 'Shows the player''s password';
  end;

  labels[LBL_SHOW_PIN] := TLabel.create(panels[PNL_PLAYER]);
  with labels[LBL_SHOW_PIN] do
  begin
    parent := panels[PNL_PLAYER];
    caption := 'Show';
    width := 25;
    font.size := 8;
    top := (checkBoxes[CHK_SHOW_PIN].top + CENTER_LBLS);
    left := (checkBoxes[CHK_SHOW_PIN].left + checkBoxes[CHK_SHOW_PIN].width + 5);
  end;

  comboBoxes[CBO_ACTIVE] := TComboBox.create(forms[FRM_MAIN]);
  with comboBoxes[CBO_ACTIVE] do
  begin
    parent := lists[LST_PLAYERS].parent;
    left := edits[EDT_LOGIN].left;
    top := (edits[EDT_PIN].top + HEIGHT_TEXT_COMPONENTS + PLAYER_SPACING);
    text := 'true';
    items.add('true');
    items.add('false');
    hint := 'Do you want to use this player?';
  end;

  comboBoxes[CBO_MEMBER] := TComboBox.create(forms[FRM_MAIN]);
  with comboBoxes[CBO_MEMBER] do
  begin
    parent := lists[LST_PLAYERS].parent;
    left := edits[EDT_LOGIN].left;
    top := (comboBoxes[CBO_ACTIVE].top + HEIGHT_TEXT_COMPONENTS + PLAYER_SPACING);
    text := 'false';
    items.add('true');
    items.add('false');
    hint := 'Is this player a Runescape member?';
  end;

  labels[LBL_USERNAME] := TLabel.create(forms[FRM_MAIN]);
  with labels[LBL_USERNAME] do
  begin
    parent := lists[LST_PLAYERS].parent;
    caption := 'Login Name *';
    top := (edits[EDT_LOGIN].top  + CENTER_LBLS);
    left := (lists[LST_PLAYERS].left + lists[LST_PLAYERS].width + PLAYER_SPACING);
  end;

  labels[LBL_ALIAS] := TLabel.create(forms[FRM_MAIN]);
  with labels[LBL_ALIAS] do
  begin
    parent := lists[LST_PLAYERS].parent;
    caption := 'Display Name';
    top := (edits[EDT_ALIAS].top  + CENTER_LBLS);
    left := labels[LBL_USERNAME].left;
  end;

  labels[LBL_PASSWORD] := TLabel.create(forms[FRM_MAIN]);
  with labels[LBL_PASSWORD] do
  begin
    parent := lists[LST_PLAYERS].parent;
    caption := 'Password *';
    top := (edits[EDT_PASSWORD].top  + CENTER_LBLS);
    left := labels[LBL_USERNAME].left;
  end;

  labels[LBL_PIN] := TLabel.create(forms[FRM_MAIN]);
  with labels[LBL_PIN] do
  begin
    parent := lists[LST_PLAYERS].parent;
    caption := 'Bank Pin';
    top := (edits[EDT_PIN].top  + CENTER_LBLS);
    left := labels[LBL_USERNAME].left;
  end;

  labels[LBL_ACTIVE] := TLabel.create(forms[FRM_MAIN]);
  with labels[LBL_ACTIVE] do
  begin
    parent := lists[LST_PLAYERS].parent;
    caption := 'Active';
    top := (comboBoxes[CBO_ACTIVE].top  + CENTER_LBLS);
    left := labels[LBL_USERNAME].left;
  end;

  labels[LBL_MEMBER] := TLabel.create(forms[FRM_MAIN]);
  with labels[LBL_MEMBER] do
  begin
    parent := lists[LST_PLAYERS].parent;
    caption := 'Member *';
    top := (comboBoxes[CBO_MEMBER].top  + CENTER_LBLS);
    left := labels[LBL_USERNAME].left;
  end;

  buttons[BTN_PLAYER_ADD] := TButton.create(forms[FRM_MAIN]);
  with buttons[BTN_PLAYER_ADD] do
  begin
    parent := lists[LST_PLAYERS].parent;
    width := 90;
    top := buttons[BTN_ADVANCED_PLAYER].top;
    left := labels[LBL_USERNAME].left;
    hint := 'Adds the player with the current settings to the Player List';
    caption := 'Add Player';
  end;

  buttons[BTN_PLAYER_DELETE] := TButton.create(forms[FRM_MAIN]);
  with buttons[BTN_PLAYER_DELETE] do
  begin
    parent := lists[LST_PLAYERS].parent;
    width := buttons[BTN_PLAYER_ADD].width;
    top := buttons[BTN_PLAYER_ADD].top;
    left := (buttons[BTN_PLAYER_ADD].left + width + PLAYER_SPACING);
    hint := 'Removes the selected player from the Player List';
    caption := 'Delete Player';
  end;

  lists[LST_PLAYER_SCRIPTS] := TListBox.create(forms[FRM_MAIN]);
  with lists[LST_PLAYER_SCRIPTS] do
  begin
    parent := lists[LST_PLAYERS].parent;
    top := lists[LST_PLAYERS].top;
    width := lists[LST_PLAYERS].width;
    height := (buttons[BTN_PLAYER_DELETE].top + buttons[BTN_PLAYER_DELETE].height - top);
    left := (labels[LBL_SHOW_PSWD].left + labels[LBL_SHOW_PSWD].width + PLAYER_SPACING);
    hint := 'A list of all the selected player''s scripts. Double click to open advanced settings.';
  end;

  buttons[BTN_SCRIPT_ADD] := TButton.create(forms[FRM_MAIN]);
  with buttons[BTN_SCRIPT_ADD] do
  begin
    parent := lists[LST_PLAYERS].parent;
    top := lists[LST_PLAYER_SCRIPTS].top;
    width := 120;
    left := (lists[LST_PLAYER_SCRIPTS].left + lists[LST_PLAYER_SCRIPTS].width + PLAYER_SPACING);
    hint := 'Click to add a script for the current player';
    caption := 'Add Script';
  end;

  buttons[BTN_SCRIPT_DELETE] := TButton.create(forms[FRM_MAIN]);
  with buttons[BTN_SCRIPT_DELETE] do
  begin
    parent := lists[LST_PLAYERS].parent;
    top := (buttons[BTN_SCRIPT_ADD].top + height + PLAYER_SPACING);
    width := buttons[BTN_SCRIPT_ADD].width;
    left := buttons[BTN_SCRIPT_ADD].left;
    hint := 'Click to remove the selected script from the list';
    caption := 'Delete Script';
  end;

  buttons[BTN_SCRIPT_SETTINGS] := TButton.create(forms[FRM_MAIN]);
  with buttons[BTN_SCRIPT_SETTINGS] do
  begin
    parent := lists[LST_PLAYERS].parent;
    top := (buttons[BTN_SCRIPT_DELETE].top + height + PLAYER_SPACING);
    width := buttons[BTN_SCRIPT_DELETE].width;
    left := buttons[BTN_SCRIPT_DELETE].left;
    hint := 'Click or double click script in list to customize script settings';
    caption := 'Script Settings';
  end;

  labels[LBL_SCRIPTS] := TLabel.create(forms[FRM_MAIN]);
  with labels[LBL_SCRIPTS] do
  begin
    parent := lists[LST_PLAYERS].parent;
    caption := 'Player''s Scripts';
    top := (lists[LST_PLAYER_SCRIPTS].top - labels[LBL_SCRIPTS].height);
    left := lists[LST_PLAYER_SCRIPTS].left;
  end;

  labels[LBL_REQUIRED] := TLabel.create(forms[FRM_MAIN]);
  with labels[LBL_REQUIRED] do
  begin
    parent := lists[LST_PLAYERS].parent;
    caption := '* = Required field';
    top := (panels[PNL_PLAYER].height - height - PLAYER_SPACING);
    left := (panels[PNL_PLAYER].width - width - PLAYER_SPACING - 30);
  end;

  initPlayerAdvanced();
end;

procedure formInit();
var
  i: integer;
begin
  forms[FRM_MAIN] := TForm.create(nil);
  with forms[FRM_MAIN] do
  begin
    width := 750;
    height := 355;
    caption := 'MSI Phoenix ~ Multiple Script Integration @ SRL-Forums';
    onPaint := @onPaints;
  end;

  forms[FRM_SCRIPT_SETUP] := TForm.create(forms[FRM_MAIN]);
  with forms[FRM_SCRIPT_SETUP] do
  begin
    width := 300;
    height := 500;
    caption := 'Script Settings';
    visible := false;
  end;

  mainMenuCreate();
  scriptListCreate();

  openDialog := TOpenDialog.create(forms[FRM_MAIN]);
  openDialog.title := 'Choose a player file to open';

  saveDialog := TSaveDialog.create(forms[FRM_MAIN]);
  saveDialog.title := 'Save your player file';
  saveDialog.defaultExt := '.txt';

  buttons[BTN_SETTINGS] := TButton.create(forms[FRM_MAIN]);
  with buttons[BTN_SETTINGS] do
  begin
    parent := forms[FRM_MAIN];
    width := 150;
    top := 10;
    left := 10;
    hint := 'Takes you to the script settings page';
    caption := '<< Script Settings     ';
  end;

  labels[LBL_TITLE] := TLabel.create(forms[FRM_MAIN]);
  with labels[LBL_TITLE] do
  begin
    parent := forms[FRM_MAIN];
    top := 2;
    left := (buttons[BTN_SETTINGS].left + buttons[BTN_SETTINGS].width + 130);
    font.height := 35;
    font.style := [fsItalic];
  end;

  buttons[BTN_PLAYER] := TButton.create(forms[FRM_MAIN]);
  with buttons[BTN_PLAYER] do
  begin
    parent := forms[FRM_MAIN];
    width := buttons[BTN_SETTINGS].width;
    top := buttons[BTN_SETTINGS].top;
    left := (parent.width - (width + 10));
    hint := 'Takes you to the player setup page';
    caption := '     Player Setup >>';
  end;

  for i := low(panels) to high(panels) do
  begin
    panels[i] := TPanel.create(forms[FRM_MAIN]);
    with panels[i] do
    begin
      parent := forms[FRM_MAIN];
      left := 0;
      top := 50;
      height := (forms[FRM_MAIN].height - top - HEIGHT_MNU);
      width := forms[FRM_MAIN].width;
      panels[i].bevelWidth := 0;
      visible := false;
      color := COLOR_BACKGROUND;
    end;
  end;

  with panels[PNL_MAIN] do
  begin
    visible := true;
    top := 0;
    height := parent.height;
  end;

  initIntro();
  initScriptSetup();
  initPlayerSetup();

  // Set the common attributes for all forms/components
  for i := low(forms) to high(forms) do
    with forms[i] do
    begin
      borderStyle := bsSingle;
      position := poScreenCenter;
      color := COLOR_BACKGROUND;
    end;

  for i := low(lists) to high(lists) do
    with lists[i] do
    begin
      showHint := true;
    end;

  for i := low(labels) to high(labels) do
    with labels[i] do
    begin
      font.color := COLOR_FONT;
    end;

  for i := low(edits) to high(edits) do
    with edits[i] do
    begin
      height := HEIGHT_TEXT_COMPONENTS;
      width := WIDTH_EDTS;
      showHint := true;
    end;

  for i := low(comboBoxes) to high(comboBoxes) do
    with comboBoxes[i] do
    begin
      showHint := true;
      onKeyPress := @preventTyping;
    end;

  for i := low(buttons) to high(buttons) do
    with buttons[i] do
    begin
      height := 25;
      font.style := [fsItalic];
      showHint := true;
      if (onClick = nil) then
        onClick := @onClicks;
    end;

  for i := low(checkBoxes) to high(checkBoxes) do
    with checkBoxes[i] do
    begin
      showHint := true;
      onClick := @onClicks;
    end;

  forms[FRM_MAIN].showModal;
end;

procedure formSafeCall(proc: string);
var
  v: TVariantArray;
begin
  setLength(v, 0);
  threadSafeCall(proc, v);
end;

procedure formFree();
begin
  forms[FRM_MAIN].free();
end;

