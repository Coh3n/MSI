{$DEFINE FORM_TESTING}

{$IFDEF FORM_TESTING}
  {$i msi/msi/core/setup.simba}
{$ENDIF}

const
  _SPACING    = 10; // spacing between components
  _MENUHEIGHT = 20; // the main menu is X pixels in Height
  _EDIT_LABEL = 4;  // pixels to move so label is in the middle of the TEdit

  COLOR_BACKGROUND = clDefault;
  COLOR_FONT       = clBlack;

// component constants
const
  FORM_COUNT = 4;
    FORM_MAIN            = 1;
    FORM_SETTINGS_PLAYER = 2;
    FORM_SCRIPT_SETUP    = 3;
    FORM_SCRIPT_LIST     = 4;

  MENU_COUNT = 4;
    MENU_FILE = 1;
      ITEM_NEW     = 1;
      ITEM_LOAD    = 2;
      ITEM_SAVE    = 3;
      ITEM_SAVE_AS = 4;
      ITEM_DEFAULT = 5;
      ITEM_CLOSE   = 4;

    MENU_START = 2;
      ITEM_MAIN = 1;
      ITEM_RUN  = 2;

    MENU_FEEDBACK = 3;
      ITEM_BUG        = 1;
      ITEM_SUGGESTION = 2;
      ITEM_REPORTS    = 3;
      ITEM_CONTRIBUTE = 4;

    MENU_HELP = 4;
      ITEM_FORUM = 1;
      ITEM_HELP  = 2;
      ITEM_DOC   = 3;
      ITEM_ABOUT = 4;

  PANEL_COUNT = 3;
    PANEL_MAIN     = 1;
    PANEL_PLAYER   = 2;
    PANEL_SETTINGS = 3;

  LIST_COUNT = 3;
    LIST_PLAYERS        = 1;
    LIST_PLAYER_SCRIPTS = 2;
    LIST_ALL_SCRIPTS    = 3;

  CHECKLIST_COUNT = 1;
    CHECKLIST_REWARDS = 1;

  EDIT_COUNT = 17;
    EDIT_USERNAME    = 1;
    EDIT_PASSWORD    = 2;
    EDIT_PIN         = 3;
    EDIT_TIME_BREAK  = 4;
    EDIT_TIME_TOTAL  = 5;
    EDIT_LOADS_BREAK = 6;
    EDIT_LOADS_TOTAL = 7;
    EDIT_BREAK_FOR   = 8;
    EDIT_SMART_WORLD = 9;
    EDIT_STATS_ID    = 10;
    EDIT_STATS_PASS  = 11;
    EDIT_DEBUG_LEVEL = 12;
    EDIT_ANTIBAN_PLAYERS    = 13;
    EDIT_ANTIBAN_REST_AT    = 14;
    EDIT_ANTIBAN_REST_UNTIL = 15;
    EDIT_ADVANCE_ANTIBAN    = 16;
    EDIT_ADVANCE_RANDOMS    = 17;

  COMBOBOX_COUNT = 1;
    COMBOBOX_LAMPSKILL = 1;

  CHECKBOX_COUNT = 16;
    CHECKBOX_ACTIVE        = 1;
    CHECKBOX_MEMBER        = 2;
    CHECKBOX_APPLY_ALL     = 3;
    CHECKBOX_SMART_SIGNED  = 4;
    CHECKBOX_SMART_DEBUG   = 5;
    CHECKBOX_CPU_REPORT    = 6;
    CHECKBOX_CPU_DEBUG     = 7;
    CHECKBOX_DEBUG_LOG     = 8;
    CHECKBOX_DEBUG_REPORT  = 9;
    CHECKBOX_DEBUG_GUI     = 10;
    CHECKBOX_ANTIBAN_HUMAN = 11;
    CHECKBOX_ANTIBAN_DEATH = 12;
    CHECKBOX_ANTIBAN_QC    = 13;
    CHECKBOX_ANTIBAN_NP    = 14;
    CHECKBOX_ANTIBAN_WORLD = 15;
    CHECKBOX_ANTIBAN_RTOOL = 16;

  BUTTON_COUNT = 15;
    BUTTON_CONTINUE           = 1;
    BUTTON_SETTINGS           = 2;
    BUTTON_PLAYER             = 3;
    BUTTON_PLAYER_ADD         = 4;
    BUTTON_PLAYER_DELETE      = 5;
    BUTTON_PLAYER_SAVE        = 6;
    BUTTON_PLAYER_CANCEL      = 7;
    BUTTON_SCRIPT_ADD         = 8;
    BUTTON_SCRIPT_DELETE      = 9;
    BUTTON_SCRIPT_SETTINGS    = 10;
    BUTTON_SCRIPT_LIST_ADD    = 11;
    BUTTON_SCRIPT_LIST_CANCEL = 12;
    BUTTON_ADVANCED_PLAYER    = 13;
    BUTTON_STATS_SIGNUP       = 14;
    BUTTON_START_SCRIPT       = 15;

  LABEL_COUNT = 14;
    LABEL_PLAYERS     = 1;
    LABEL_SCRIPTS     = 2;
    LABEL_LAMPSKILL   = 3;
    LABEL_REWARDS     = 4;
    LABEL_TITLE       = 5;
    LABEL_SMART_WORLD = 6;
    LABEL_STATS_ID    = 7;
    LABEL_STATS_PASS  = 8;
    LABEL_DEBUG_LEVEL = 9;
    LABEL_ANTIBAN_PLAYERS    = 10;
    LABEL_ANTIBAN_REST_AT    = 11;
    LABEL_ANTIBAN_REST_UNTIL = 12;
    LABEL_ADVANCE_ANTIBAN    = 13;
    LABEL_ADVANCE_RANDOMS    = 14;

  TAB_SETTING_COUNT = 6;
    TAB_SETTING_SMART    = 1;
    TAB_SETTING_STATS    = 2;
    TAB_SETTING_CPU      = 3;
    TAB_SETTING_DEBUG    = 4;
    TAB_SETTING_ANTIBAN  = 5;
    TAB_SETTING_ADVANCED = 6;

// Other variables
var
  MSI_Ready: Boolean;

// Form components
var
  Forms: array[1..FORM_COUNT] of TForm;

  MainMenu: TMainMenu;
  MainMenuItems: array[1..MENU_COUNT] of array of TMenuItem;

  Panels     : array[1..PANEL_COUNT] of TPanel;
  Lists      : array[1..LIST_COUNT] of TListBox;
  Edits      : array[1..EDIT_COUNT] of TEdit;
  Labels     : array[1..LABEL_COUNT] of TLabel;
  ComboBoxes : array[1..COMBOBOX_COUNT] of TComboBox;
  Buttons    : array[1..BUTTON_COUNT] of TButton;
  CheckBoxes : array[1..CHECKBOX_COUNT] of TCheckBox;
  CheckLists : array[1..CHECKLIST_COUNT] of TCheckListBox;

  SettingsPageControl: TPageControl;
  SettingsTabs: array[1..TAB_SETTING_COUNT] of TTabSheet;

  OpenDialog : TOpenDialog;
  SaveDialog : TSaveDialog;

  MSI_ScriptReady: Boolean;

(**
 * Converts the 'skill' constant to a string.
 *)
function skillToStr(skill: integer): string;
begin
  case skill of
    SKILL_NONE: result := 'Money Making';
    SKILL_ATTACK: result := 'Attack';
    SKILL_DEFENCE: result := 'Defence';
    SKILL_STRENGTH: result := 'Strength';
    SKILL_HITPOINTS, SKILL_HP: result := 'Constitution';
    SKILL_RANGE: result := 'Range';
    SKILL_PRAYER: result := 'Prayer';
    SKILL_MAGIC: result := 'Magic';
    SKILL_COOKING: result := 'Cooking';
    SKILL_WOODCUTTING: result := 'Woodcutting';
    SKILL_FLETCHING: result := 'Fletching';
    SKILL_FISHING: result := 'Fishing';
    SKILL_FIREMAKING: result := 'Firemaking';
    SKILL_CRAFTING: result := 'Crafting';
    SKILL_SMITHING: result := 'Smithing';
    SKILL_MINING: result := 'Mining';
    SKILL_HERBLORE: result := 'Herblore';
    SKILL_AGILITY: result := 'Agility';
    SKILL_THIEVING: result := 'Thieving';
    SKILL_SLAYER: result := 'Slayer';
    SKILL_FARMING: result := 'Farming';
    SKILL_RUNECRAFTING: result := 'Runecrafting';
    SKILL_HUNTER: result := 'Hunter';
    SKILL_CONSTRUCTION: result := 'Construction';
    SKILL_SUMMONING: result := 'Summoning';
    SKILL_DUNGEONEERING: result := 'Dungeoneering';

    else
      MSI_SubDebug('[FORM]: Invalid skill in skillToString');
  end;
end;

(**
 * Removed the spaces at the start of 's'. Used for adding scripts to a player's
 * script list.
 *)
function removePreSpaces(s: string): string;
var
  i: integer;
begin
  for i := 1 to length(s) do
    if (s[i] <> ' ') then
    begin
      result := copy(s, i, length(s));
      break;
    end;
end;

(**
 * Prevents people from typing in a ComboBox.
 *)
procedure preventTyping(sender: TObject; var key: char);
begin
  key := chr(VK_CANCEL);
end;

(**
 * Returns true if 'str' is in the list box 'list'.
 *)
function inList(list: TListBox; str: string): boolean;
var
  i: integer;
begin
  for i := 0 to (list.items.count - 1) do
    if (lowercase(str) = lowercase(list.items.strings[i])) then
    begin
      result := true;
      break;
    end;

  //writeln(toStr('inList: '+toStr(result)));
end;

(**
 * Deletes the list entery 'element' from 'list'.
 *)
procedure deleteFromList(list: TListBox; element: integer);
begin
  if (element = 0) then
    list.itemIndex := 1
  else
    list.itemIndex := list.itemIndex - 1;

  list.items.delete(element);
end;


(**
 * Resets player advanced components (advanced settings form) so they're blank
 * for the next player.
 *)
procedure resetPlayerAdvanced();
begin
end;

(**
 * Resets player components (username/password/etc.) so they're ready for
 * another player to be added.
 *)
procedure resetPlayerSettings();
begin
  Edits[EDIT_USERNAME].Text := '';
  Edits[EDIT_PASSWORD].Text := '';
  Edits[EDIT_PIN].Text      := '';
  Edits[EDIT_USERNAME].OnExit(Edits[EDIT_USERNAME]);
  Edits[EDIT_PASSWORD].OnExit(Edits[EDIT_PASSWORD]);
  Edits[EDIT_PIN].OnExit(Edits[EDIT_PIN]);

  Lists[LIST_PLAYER_SCRIPTS].Clear;
  Buttons[BUTTON_SCRIPT_DELETE].Enabled := false;
  Buttons[BUTTON_SCRIPT_ADD].Enabled := false;
  Buttons[BUTTON_SCRIPT_SETTINGS].Enabled := false;

  CheckBoxes[CHECKBOX_ACTIVE].Checked := false;
  CheckBoxes[CHECKBOX_MEMBER].Checked := false;
  CheckBoxes[CHECKBOX_APPLY_ALL].Checked := false;
end;


(**
 * _Enter and _Exit are used for TEdits. When clicked, TEdit will clear (if
 * nothing has been entered yet); will show password if TEdit is a password
 * field. Text is distinguished using italics and the color grey.
 *)
procedure _Enter(Sender: TObject);
begin
  if (Sender is TEdit) then
    with TEdit(Sender) do
      if (text = name) then
      begin
        text := '';

        font.color := clBlack;
        font.style := [];
      end else
        if (tag = $01) then
          passwordChar := #0;
end;

(**
 * See description for _Enter.
 *)
procedure _Exit(Sender: TObject);
begin
  if (Sender is TEdit) then
    with TEdit(Sender) do
      if (text = '') then
      begin
        text := name;

        font.color := clGray;
        font.style := [fsItalic];

        if (tag = $01) then
          passwordChar := #0;
      end else
        if (tag = $01) then
          passwordChar := '*';
end;

(**
 * Used to paint the line under the titles and panel buttons.
 *)
procedure _Paint(sender: TObject);
begin
  with TForm(sender) do
    with canvas do
    begin
      moveTo(10, (Panels[PANEL_PLAYER].Top - 3));
      lineTo((Width - 10), (Panels[PANEL_PLAYER].Top - 3));
    end;
end;

(**
 * Handles double clicks for all components.
 *)
procedure _DoubleClick(sender: TObject);
begin
  case sender of
    Lists[LIST_PLAYERS]:
      if (TListBox(Sender).ItemIndex <> -1) then
        Forms[FORM_SETTINGS_PLAYER].Visible := true;

    Lists[LIST_PLAYER_SCRIPTS]:
      if (TListBox(Sender).ItemIndex <> -1) then
        Forms[FORM_SCRIPT_SETUP].Visible := true;
  end;
end;

(**
 * Handles left clicks for most components. Some components have specific
 * methods, which are found in the other form include files.
 *)
procedure _Click(sender: TObject);
var
  i: integer;
begin
  case sender of
    MainMenuItems[MENU_FILE][ITEM_NEW]:
      begin
      end;

    MainMenuItems[MENU_FILE][ITEM_LOAD]:
      begin
        if (OpenDialog.Execute) then
        begin
          // Code to load all player information here
          Edits[EDIT_USERNAME].Text := ReadINI('0', 'Test', OpenDialog.FileName);
        end;
      end;

    MainMenuItems[MENU_FILE][ITEM_SAVE]:
      begin
        if (SaveDialog.Execute) then
        begin
          // Code to save all player information here
          writeINI('0', 'Test', Edits[EDIT_USERNAME].Text, SaveDialog.FileName);
        end;
      end;

    MainMenuItems[MENU_FILE][ITEM_SAVE_AS]:
      begin
      end;

    MainMenuItems[MENU_FILE][ITEM_DEFAULT]:
      begin
      end;

    MainMenuItems[MENU_FILE][ITEM_CLOSE]:
      Forms[FORM_MAIN].modalResult := mrOk;

    MainMenuItems[MENU_START][ITEM_RUN]:
      begin
        MSI_Ready := true;
        Forms[FORM_MAIN].modalResult := mrOk;
      end;

    MainMenuItems[MENU_FEEDBACK][ITEM_BUG]:
      openWebPage('http://villavu.com/forum/forumdisplay.php?f=444');

    MainMenuItems[MENU_FEEDBACK][ITEM_SUGGESTION]:
      openWebPage('http://villavu.com/forum/forumdisplay.php?f=445');

    MainMenuItems[MENU_FEEDBACK][ITEM_REPORTS]:
      openWebPage('http://villavu.com/forum/showthread.php?t=56134');

    MainMenuItems[MENU_FEEDBACK][ITEM_CONTRIBUTE]:
      openWebPage('http://villavu.com/forum/showthread.php?t=56179');

    MainMenuItems[MENU_START][ITEM_MAIN]:
      begin
        Panels[PANEL_PLAYER].Visible   := false;
        Panels[PANEL_SETTINGS].Visible := false;
        Panels[PANEL_MAIN].Visible     := true;
      end;

    MainMenuItems[MENU_HELP][ITEM_FORUM]:
      openWebPage('http://villavu.com/forum/index.php');

    MainMenuItems[MENU_HELP][ITEM_HELP]:
      openWebPage('http://villavu.com/forum/showthread.php?t=57723');

    MainMenuItems[MENU_HELP][ITEM_DOC]:
      openWebPage('http://docs.wizzup.org/msi/index.html#');

    MainMenuItems[MENU_HELP][ITEM_ABOUT]:
      openWebPage('http://villavu.com/forum/showthread.php?t=56614');

    Lists[LIST_PLAYERS]:
      begin
        i := Lists[LIST_PLAYERS].ItemIndex;

        if (i <> -1) then
        begin
          Labels[LABEL_SCRIPTS].Caption := Lists[LIST_PLAYERS].Items.Strings[i] + '''s Scripts';

          Buttons[BUTTON_ADVANCED_PLAYER].Enabled := true;
          Buttons[BUTTON_SCRIPT_ADD].Enabled := true;
        end else begin
          Lists[LIST_PLAYER_SCRIPTS].Clear();
          Labels[LABEL_SCRIPTS].Caption := 'Player''s Scripts';
        end;
      end;

    Lists[LIST_PLAYER_SCRIPTS]:
      begin
        if (Lists[LIST_PLAYER_SCRIPTS].ItemIndex <> -1) then
        begin
          Buttons[BUTTON_SCRIPT_DELETE].Enabled := true;
          Buttons[BUTTON_SCRIPT_SETTINGS].Enabled := true;
        end;
      end;

    Buttons[BUTTON_ADVANCED_PLAYER]:
      _DoubleClick(Lists[LIST_PLAYERS]);

    Buttons[BUTTON_CONTINUE]:
      begin
        Buttons[BUTTON_PLAYER].Enabled := true;
        Buttons[BUTTON_SETTINGS].Enabled := false;

        Panels[PANEL_MAIN].Visible := false;
        Panels[PANEL_SETTINGS].Visible := true;

        Labels[LABEL_TITLE].caption := 'Global Settings';
      end;

    Buttons[BUTTON_SETTINGS]:
      begin
        Buttons[BUTTON_PLAYER].Enabled := true;
        Buttons[BUTTON_SETTINGS].Enabled := false;

        Panels[PANEL_PLAYER].Visible := false;
        Panels[PANEL_SETTINGS].Visible := true;

        Labels[LABEL_TITLE].caption := 'Global Settings';
      end;

    Buttons[BUTTON_PLAYER]:
      begin
        Buttons[BUTTON_PLAYER].Enabled := false;
        Buttons[BUTTON_SETTINGS].Enabled := true;

        Panels[PANEL_PLAYER].Visible := true;
        Panels[PANEL_SETTINGS].Visible := false;

        Labels[LABEL_TITLE].caption := 'Player Settings';
      end;

    Buttons[BUTTON_PLAYER_CANCEL]:
      Forms[FORM_SETTINGS_PLAYER].Visible := false;

    Buttons[BUTTON_PLAYER_DELETE]:
      begin
        deleteFromList(Lists[LIST_PLAYERS], Lists[LIST_PLAYERS].ItemIndex);

        Buttons[BUTTON_SCRIPT_ADD].Enabled := (Lists[LIST_PLAYERS].Items.Count > 0);
        Buttons[BUTTON_PLAYER_DELETE].Enabled := (Lists[LIST_PLAYERS].Items.Count > 0);
        Buttons[BUTTON_ADVANCED_PLAYER].Enabled := (Lists[LIST_PLAYERS].Items.Count > 0);

        _Click(Lists[LIST_PLAYERS]);
      end;

    Buttons[BUTTON_PLAYER_ADD]:
      begin
        if (Edits[EDIT_USERNAME].Text <> Edits[EDIT_USERNAME].Name) then
        begin
          Lists[LIST_PLAYERS].Items.Add(Edits[EDIT_USERNAME].Text);
          resetPlayerSettings();
        end else begin
          showMessage('You need to enter player information before one can be added.');
          exit;
        end;

        Buttons[BUTTON_PLAYER_DELETE].Enabled := true;
      end;

    Buttons[BUTTON_SCRIPT_ADD]:
      Forms[FORM_SCRIPT_LIST].Visible := true;

    Buttons[BUTTON_SCRIPT_DELETE]:
      begin
        deleteFromList(Lists[LIST_PLAYER_SCRIPTS], Lists[LIST_PLAYER_SCRIPTS].ItemIndex);

        Buttons[BUTTON_SCRIPT_DELETE].Enabled := (Lists[LIST_PLAYER_SCRIPTS].Items.Count > 0);
        Buttons[BUTTON_SCRIPT_SETTINGS].Enabled := (Lists[LIST_PLAYER_SCRIPTS].Items.Count > 0);
      end;

    Buttons[BUTTON_SCRIPT_SETTINGS]:
      Forms[FORM_SCRIPT_SETUP].Visible := true;

    Buttons[BUTTON_SCRIPT_LIST_CANCEL]:
      Forms[FORM_SCRIPT_LIST].Visible := false;

    Buttons[BUTTON_STATS_SIGNUP]:
      openWebPage('http://stats.villavu.com/register');

    Buttons[BUTTON_START_SCRIPT]:
      begin
        MSI_ScriptReady := true;
        Forms[FORM_MAIN].ModalResult := mrOK;
      end;
  end;
end;


(**
 * Default methods used to create components.  Avoids a lot of repeated code
 * and makes is very easy to change the size of all components if needed.
 *)

function _TListBox(Owner: TComponent): TListBox;
begin
  Result := TListBox.Create(Owner);
  with Result do
  begin
    OnDblClick := @_DoubleClick;
    OnClick    := @_Click;
    ShowHint   := true;
  end;
end;

function _TEdit(Owner: TComponent): TEdit;
begin
  Result := TEdit.Create(Owner);
  with Result do
  begin
    ShowHint := true;

    Height := 20;
    Width  := 100;
    Text   := name;

    Font.Style := [fsItalic];
    Font.Color := clGray;

    OnEnter := @_Enter;
    OnExit  := @_Exit;
  end;
end;

function _TComboBox(Owner: TComponent): TComboBox;
begin
  Result := TComboBox.Create(Owner);
  with Result do
  begin
    ShowHint := true;

    Height := 20;
    Width  := 100;
    Text   := name;

    Font.Style := [fsItalic];
    Font.Color := clGray;
  end;
end;

function _TButton(Owner: TComponent): TButton;
begin
  Result := TButton.Create(Owner);
  with Result do
  begin
    ShowHint   := true;
    Height     := 25;
    OnClick    := @_Click;
  end;
end;

function _TCheckBox(Owner: TComponent): TCheckBox;
begin
  Result := TCheckBox.Create(Owner);
  with Result do
  begin
    Width := 15;
    Height := 15;

    ShowHint := true;

    OnClick  := @_Click;
  end;
end;


var
  SL_Trees: array of TIntegerArray;
  SL_TreeIndexes: TIntegerArray;

(**
 * Loops through all MSI scripts, sorting them into skill categories. Sets
 * SL_Trees array.
 *)
procedure SL_SetTrees();
var
  i: integer;
begin
  setLength(SL_Trees, SKILL_COUNT);
  setLength(SL_TreeIndexes, SKILL_COUNT);

  for i := 0 to high(MSI_Scripts) do
  begin
    if (MSI_Scripts[i].Name = '') then
      continue;

    with MSI_Scripts[i] do
    begin
      setLength(SL_Trees[skillConst], length(SL_Trees[skillConst]) + 1);
      SL_Trees[skillConst][high(SL_Trees[skillConst])] := constant;
    end;
  end;
end;

(**
 * Will either expand or contract the 'tree' in the script list.
 *)
procedure SL_ModifyTree(tree: integer; expand: boolean);
var
  c, i, j: integer;
begin
  for i := 0 to high(SL_Trees) do
  begin
    if (length(SL_Trees[i]) <= 0) then
      continue;

    if (tree = SL_TreeIndexes[i]) then
      with Lists[LIST_ALL_SCRIPTS] do
      begin
        if (expand) then
          Items.Strings[SL_TreeIndexes[i] - 1] := '-   ' + skillToStr(i)
        else
          Items.Strings[SL_TreeIndexes[i] - 1] := '+  ' + skillToStr(i);

        c := 0;

        for j := high(SL_Trees[i]) downto 0 do
        begin
          if (expand) then
            Items.Insert(tree, '         ' + capitalize(MSI_Scripts[SL_Trees[i][j]].Name))
          else
            Items.Delete(tree);

          inc(c);
        end;

        continue;
      end;

    if (expand) then
      incEx(SL_TreeIndexes[i], c)
    else
      decEx(SL_TreeIndexes[i], c);
  end;
end;

(**
 * Expands or contracts the clicked tree in the script list.
 *)
procedure SL_ExpandTree(Sender: TObject);
var
  e: integer;
begin
  e := Lists[LIST_ALL_SCRIPTS].ItemIndex;
  if (e = -1) then
    exit;

  if (pos('+', Lists[LIST_ALL_SCRIPTS].Items.Strings[e]) > 0) then
    SL_ModifyTree(e + 1, true)
  else
    if (pos('-', Lists[LIST_ALL_SCRIPTS].Items.Strings[e]) > 0) then
      SL_ModifyTree(e + 1, false);

  Buttons[BUTTON_SCRIPT_LIST_ADD].Enabled := true;
end;

(**
 * Adds the selected script to the player's script list.
 *)
procedure SL_AddScript(Sender: TObject);
var
  e: integer;
begin
  e := Lists[LIST_ALL_SCRIPTS].ItemIndex;
  if (e = -1) then
    exit;

  // if one of the expandable options (i.e. skill titles)
  if (pos('+', Lists[LIST_ALL_SCRIPTS].Items.Strings[e]) = 1) or
     (pos('-', Lists[LIST_ALL_SCRIPTS].Items.Strings[e]) = 1) then
  begin
    showMessage('Invalid selection');
    exit;
  end;

  // add the splected script to the player's script list
  if (not inList(Lists[LIST_PLAYER_SCRIPTS], removePreSpaces(Lists[LIST_ALL_SCRIPTS].Items.Strings[e]))) then
    Lists[LIST_PLAYER_SCRIPTS].Items.Add(
      removePreSpaces(Lists[LIST_ALL_SCRIPTS].Items.Strings[e])
    );

  Forms[FORM_SCRIPT_LIST].Visible := false;
end;

{
type
  TSkillForm = record
    name: integer;
    numberOfLists, numberOfEdits, numberOfCombos: integer;
    labelsLists, labelsEdits, labelsCombos: TStringArray;
    skillLists: array of TCheckListBox;
    skillEdits: array of TEdit;
    skillCombos: array of TComboBox;
  end;

function getSkillForm(skill: integer): TSkillForm;
begin
  case skill of
    SKILL_WOODCUTTING: ;
    SKILL_MINING: ;
    SKILL_FISHING: ;
    SKILL_COOKING: ;
    SKILL_MAGIC: ;
    SKILL_NONE: ;

    else
      MSI_SubDebug('[FORM] Invalid skill in getSkillForm');
  end;
end;

procedure initSkillForm(skill: integer);
begin
end;
}

// Credit to Dan Cardin (http://villavu.com/forum/showthread.php?t=39078)
// Initiates the main menu at the top of the form ~ include mainmenu.simba
procedure initMainMenu();
var
  i, j: integer;
  mainMenuNames: array[1..MENU_COUNT] of TStringArray;
begin
  // The first one ('File') is the heading, the rest are sub-options
  mainMenuNames[MENU_FILE]     := ['File', 'New', 'Open', 'Save', 'Save as...', 'Save as Default', 'Close'];
  mainMenuNames[MENU_START]    := ['Start', 'Show Logo', 'Run'];
  mainMenuNames[MENU_FEEDBACK] := ['Feedback', 'Report a bug', 'Suggest a feature', 'Progress Reports', 'Want to contribute?'];
  mainMenuNames[MENU_HELP]     := ['Help', 'SRL-Forums', 'MSI Help', 'Documentation', 'What is MSI?'];

  MainMenu := TMainMenu.Create(Forms[FORM_MAIN]);

  for i := low(MainMenuItems) to high(MainMenuItems) do
  begin
    setLength(MainMenuItems[i], length(mainMenuNames[i]));

    for j := low(MainMenuItems[i]) to high(MainMenuItems[i]) do
    begin
      MainMenuItems[i][j] := TMenuItem.Create(Forms[FORM_MAIN]);
      MainMenuItems[i][j].Caption := mainMenuNames[i][j];

      if (j = low(MainMenuItems[i])) then
        MainMenu.Items.Add(MainMenuItems[i][j])
      else
        MainMenu.Items.Items[i - 1].Add(MainMenuItems[i][j]);

      MainMenuItems[i][j].OnClick := @_Click;
    end;
  end;
end;

procedure initIntro();
begin
  Buttons[BUTTON_CONTINUE] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_CONTINUE] do
  begin
    Parent  := Panels[PANEL_MAIN];
    Width   := 100;
    Top     := Parent.Height - 55;
    Left    := Parent.Width - (Width + 10);
    Caption := 'Continue >>';
    Hint    := 'Click to continue to setup MSI';
  end;
end;

procedure initSettingsSMART();
begin
  SettingsTabs[TAB_SETTING_SMART].Caption := 'S.M.A.R.T.';

  CheckBoxes[CHECKBOX_SMART_SIGNED] := _TCheckBox(SettingsTabs[TAB_SETTING_SMART]);
  with CheckBoxes[CHECKBOX_SMART_SIGNED] do
  begin
    Parent  := SettingsTabs[TAB_SETTING_SMART];
    Caption := '  Use signed client (recommended)';
    Checked := true;
    Top     := _SPACING;
    Left    := _SPACING;
    Hint    := 'Do you want to use a signed (faster, more detectable) client?';
  end;

  CheckBoxes[CHECKBOX_SMART_DEBUG] := _TCheckBox(SettingsTabs[TAB_SETTING_SMART]);
  with CheckBoxes[CHECKBOX_SMART_DEBUG] do
  begin
    Parent  := CheckBoxes[CHECKBOX_SMART_SIGNED].Parent;
    Caption := '  Paint on the screen';
    Checked := false;
    Top     := CheckBoxes[CHECKBOX_SMART_SIGNED].Top + Height + _SPACING;
    Left    := CheckBoxes[CHECKBOX_SMART_SIGNED].Left;
    Hint    := 'Do you want debugging to show on the RS screen?';
  end;

  Edits[EDIT_SMART_WORLD] := _TEdit(SettingsTabs[TAB_SETTING_SMART]);
  with Edits[EDIT_SMART_WORLD] do
  begin
    Parent     := CheckBoxes[CHECKBOX_SMART_SIGNED].Parent;
    Caption    := 'Preferred world';
    Text       := '0';
    MaxLength  := 3;
    Width      := 50;
    Top        := CheckBoxes[CHECKBOX_SMART_DEBUG].Top + Height + _SPACING;
    Left       := CheckBoxes[CHECKBOX_SMART_SIGNED].Left;
    Hint       := 'What world do you prefer to login to? Leave at 0 to use default.';
    Font.Color := clBlack;
    Font.Style  := [];
  end;

  Labels[LABEL_SMART_WORLD] := TLabel.Create(SettingsTabs[TAB_SETTING_SMART]);
  with Labels[LABEL_SMART_WORLD] do
  begin
    Parent := Edits[EDIT_SMART_WORLD].Parent;
    Caption := 'Preferred world';
    Left := Edits[EDIT_SMART_WORLD].Left + Edits[EDIT_SMART_WORLD].Width + _SPACING;
    Top := Edits[EDIT_SMART_WORLD].Top + _EDIT_LABEL;
  end;
end;

procedure initSettingsStats();
begin
  // initialize all the Stats tab components
  SettingsTabs[TAB_SETTING_STATS].Caption := 'Stats Info.';

  Edits[EDIT_STATS_ID] := _TEdit(SettingsTabs[TAB_SETTING_STATS]);
  with Edits[EDIT_STATS_ID] do
  begin
    Parent := SettingsTabs[TAB_SETTING_STATS];
    Top    := _SPACING;
    Left   := _SPACING;
    Name   := 'ID';
    Hint   := 'The stats ID/username you signed up with.';
  end;

  Edits[EDIT_STATS_PASS] := _TEdit(SettingsTabs[TAB_SETTING_STATS]);
  with Edits[EDIT_STATS_PASS] do
  begin
    Parent := Edits[EDIT_STATS_ID].Parent;
    Top    := Edits[EDIT_STATS_ID].Top + Height + _SPACING;
    Left   := Edits[EDIT_STATS_ID].Left;
    Name   := 'Password';
    Tag    := $01;
    Hint   := 'The stats password you use to sign into the SRL stats website.';
  end;

  Labels[LABEL_STATS_ID] := TLabel.Create(SettingsTabs[TAB_SETTING_STATS]);
  with Labels[LABEL_STATS_ID] do
  begin
    Parent  := Edits[EDIT_STATS_ID].Parent;
    Caption := 'SRL Stats ID';
    Left    := Edits[EDIT_STATS_ID].Left + Edits[EDIT_STATS_ID].Width + _SPACING;
    Top     := Edits[EDIT_STATS_ID].Top + _EDIT_LABEL;
  end;

  Labels[LABEL_STATS_PASS] := TLabel.Create(SettingsTabs[TAB_SETTING_STATS]);
  with Labels[LABEL_STATS_PASS] do
  begin
    Parent  := Edits[EDIT_STATS_PASS].Parent;
    Caption := 'SRL Stats Password';
    Left    := Edits[EDIT_STATS_PASS].Left + Edits[EDIT_STATS_PASS].Width + _SPACING;
    Top     := Edits[EDIT_STATS_PASS].Top + _EDIT_LABEL;
  end;

  Buttons[BUTTON_STATS_SIGNUP] := _TButton(SettingsTabs[TAB_SETTING_STATS]);
  with Buttons[BUTTON_STATS_SIGNUP] do
  begin
    Parent := Edits[EDIT_STATS_PASS].Parent;
    Caption := 'Get Stats Account';
    Top := Edits[EDIT_STATS_PASS].Top + Height + _SPACING;
    Left := Edits[EDIT_STATS_ID].Left;
    Width := 150;
  end;
end;

procedure initSettingsCPU();
begin
  SettingsTabs[TAB_SETTING_CPU].Caption := 'CPU';

  CheckBoxes[CHECKBOX_CPU_REPORT] := _TCheckBox(SettingsTabs[TAB_SETTING_CPU]);
  with CheckBoxes[CHECKBOX_CPU_REPORT] do
  begin
    Parent  := SettingsTabs[TAB_SETTING_CPU];
    Caption := '  Do not print detailed progress report';
    Checked := false;
    Top     := _SPACING;
    Left    := _SPACING;
    Hint    := 'If using multiple players, the detailed report can be quite long '+#10+#13+
               'and may take a few seconds to print. Check off to save a few seconds.';
  end;

  CheckBoxes[CHECKBOX_CPU_DEBUG] := _TCheckBox(SettingsTabs[TAB_SETTING_CPU]);
  with CheckBoxes[CHECKBOX_CPU_DEBUG] do
  begin
    Parent  := CheckBoxes[CHECKBOX_CPU_REPORT].Parent;
    Caption := '  Disable debugging (not recommended)';
    Checked := false;
    Top     := CheckBoxes[CHECKBOX_CPU_REPORT].Top + Height + _SPACING;
    Left    := _SPACING;
    Hint    := 'Check off to disable debugging to the debug box. Will still save to file unless that option has been disabled.';
  end;
end;

procedure initSettingsDebug();
begin
  SettingsTabs[TAB_SETTING_DEBUG].Caption := 'Debugging';

  Edits[EDIT_DEBUG_LEVEL] := _TEdit(SettingsTabs[TAB_SETTING_DEBUG]);
  with Edits[EDIT_DEBUG_LEVEL] do
  begin
    Parent := SettingsTabs[TAB_SETTING_DEBUG];
    Top    := _SPACING;
    Left   := _SPACING;
    Text   := '10';
    Hint   := 'The lower the Debug Level, the less debug text will be printed in the Simba debug box.';
    Font.Style := [];
    Font.Color := clBlack;
  end;

  Labels[LABEL_DEBUG_LEVEL] := TLabel.Create(SettingsTabs[TAB_SETTING_DEBUG]);
  with Labels[LABEL_DEBUG_LEVEL] do
  begin
    Parent  := Edits[EDIT_DEBUG_LEVEL].Parent;
    Caption := 'Debug Level';
    Left    := Edits[EDIT_DEBUG_LEVEL].Left + Edits[EDIT_DEBUG_LEVEL].Width + _SPACING;
    Top     := Edits[EDIT_DEBUG_LEVEL].Top + _EDIT_LABEL;
  end;

  CheckBoxes[CHECKBOX_DEBUG_LOG] := _TCheckBox(SettingsTabs[TAB_SETTING_DEBUG]);
  with CheckBoxes[CHECKBOX_DEBUG_LOG] do
  begin
    Parent  := Edits[EDIT_DEBUG_LEVEL].Parent;
    Caption := '  Save Debug Log (recommended)';
    Checked := true;
    Top     := Edits[EDIT_DEBUG_LEVEL].Top + Height + _SPACING + 6;
    Left    := _SPACING;
    Hint    := 'Debugging logs are saved to Simba/Includes/MSI/DebugLogs/';
  end;

  CheckBoxes[CHECKBOX_DEBUG_REPORT] := _TCheckBox(SettingsTabs[TAB_SETTING_DEBUG]);
  with CheckBoxes[CHECKBOX_DEBUG_REPORT] do
  begin
    Parent  := Edits[EDIT_DEBUG_LEVEL].Parent;
    Caption := '  Save Progress Reports (recommended)';
    Checked := true;
    Top     := CheckBoxes[CHECKBOX_DEBUG_LOG].Top + Height + _SPACING;
    Left    := _SPACING;
    Hint    := 'Progress reports are saved to Simba/Includes/MSI/Progress Reports/';
  end;

  CheckBoxes[CHECKBOX_DEBUG_LOG] := _TCheckBox(SettingsTabs[TAB_SETTING_DEBUG]);
  with CheckBoxes[CHECKBOX_DEBUG_LOG] do
  begin
    Parent  := Edits[EDIT_DEBUG_LEVEL].Parent;
    Caption := '  Use Progress Report GUI';
    Top     := CheckBoxes[CHECKBOX_DEBUG_REPORT].Top + Height + _SPACING;
    Left    := _SPACING;
    Hint    := 'Shows a separate window that displays the progress report.';
  end;
end;

procedure initSettingsAntiban();
begin
  SettingsTabs[TAB_SETTING_ANTIBAN].Caption := 'Antiban';

  Edits[EDIT_ANTIBAN_PLAYERS] := _TEdit(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with Edits[EDIT_ANTIBAN_PLAYERS] do
  begin
    Parent := SettingsTabs[TAB_SETTING_ANTIBAN];
    Top    := _SPACING;
    Left   := _SPACING;
    Width  := 50;
    Text   := '100';
    Hint   := 'Will switch worlds if this many players are found on the minimap.';
    Font.Style := [];
    Font.Color := clBlack;
  end;

  Edits[EDIT_ANTIBAN_REST_AT] := _TEdit(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with Edits[EDIT_ANTIBAN_REST_AT] do
  begin
    Parent := Edits[EDIT_ANTIBAN_PLAYERS].Parent;
    Top    := Edits[EDIT_ANTIBAN_PLAYERS].Top + Height + _SPACING;
    Left   := Edits[EDIT_ANTIBAN_PLAYERS].Left;
    Text   := '20';
    Width  := 50;
    Hint   := 'Will start resting when the player''s energy goes below this value.';
    Font.Style := [];
    Font.Color := clBlack;
  end;

  Edits[EDIT_ANTIBAN_REST_UNTIL] := _TEdit(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with Edits[EDIT_ANTIBAN_REST_UNTIL] do
  begin
    Parent := Edits[EDIT_ANTIBAN_PLAYERS].Parent;
    Top    := Edits[EDIT_ANTIBAN_REST_AT].Top + Height + _SPACING;
    Left   := Edits[EDIT_ANTIBAN_REST_AT].Left;
    Text   := '80';
    Width  := 50;
    Hint   := 'Will rest until the player''s energy gets to this value.';
    Font.Style := [];
    Font.Color := clBlack;
  end;

  Labels[LABEL_ANTIBAN_PLAYERS] := TLabel.Create(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with Labels[LABEL_ANTIBAN_PLAYERS] do
  begin
    Parent  := Edits[EDIT_ANTIBAN_PLAYERS].Parent;
    Caption := 'Maximum players in the area';
    Left    := Edits[EDIT_ANTIBAN_PLAYERS].Left + Edits[EDIT_ANTIBAN_PLAYERS].Width + _SPACING;
    Top     := Edits[EDIT_ANTIBAN_PLAYERS].Top + _EDIT_LABEL;
  end;

  Labels[LABEL_ANTIBAN_REST_AT] := TLabel.Create(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with Labels[LABEL_ANTIBAN_REST_AT] do
  begin
    Parent  := Edits[EDIT_ANTIBAN_PLAYERS].Parent;
    Caption := 'Rest at energy';
    Left    := Edits[EDIT_ANTIBAN_REST_AT].Left + Edits[EDIT_ANTIBAN_REST_AT].Width + _SPACING;
    Top     := Edits[EDIT_ANTIBAN_REST_AT].Top + _EDIT_LABEL;
  end;

  Labels[LABEL_ANTIBAN_REST_UNTIL] := TLabel.Create(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with Labels[LABEL_ANTIBAN_REST_UNTIL] do
  begin
    Parent  := Edits[EDIT_ANTIBAN_PLAYERS].Parent;
    Caption := 'Rest until energy';
    Left    := Edits[EDIT_ANTIBAN_REST_UNTIL].Left + Edits[EDIT_ANTIBAN_REST_UNTIL].Width + _SPACING;
    Top     := Edits[EDIT_ANTIBAN_REST_UNTIL].Top + _EDIT_LABEL;
  end;

  CheckBoxes[CHECKBOX_ANTIBAN_HUMAN] := _TCheckBox(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with CheckBoxes[CHECKBOX_ANTIBAN_HUMAN] do
  begin
    Parent  := Edits[EDIT_ANTIBAN_PLAYERS].Parent;
    Caption := '  Use human-like breaking (single player only)';
    Top     := Edits[EDIT_ANTIBAN_REST_UNTIL].Top + Height + _SPACING + 6;
    Left    := Edits[EDIT_ANTIBAN_PLAYERS].Left;
    Hint    := 'Will sometimes use the "logout timeout" for breaking, rather than exiting to lobby.';
  end;

  CheckBoxes[CHECKBOX_ANTIBAN_DEATH] := _TCheckBox(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with CheckBoxes[CHECKBOX_ANTIBAN_DEATH] do
  begin
    Parent  := Edits[EDIT_ANTIBAN_PLAYERS].Parent;
    Caption := '  Enable death walking';
    Top     := CheckBoxes[CHECKBOX_ANTIBAN_HUMAN].Top + Height + _SPACING;
    Left    := CheckBoxes[CHECKBOX_ANTIBAN_HUMAN].Left;
    Hint    := 'If a player gets lost, it will teleport to Lumbridge and walk back to the script''s starting location.';
  end;

  CheckBoxes[CHECKBOX_ANTIBAN_QC] := _TCheckBox(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with CheckBoxes[CHECKBOX_ANTIBAN_QC] do
  begin
    Parent  := Edits[EDIT_ANTIBAN_PLAYERS].Parent;
    Caption := '  Use quick-chat when level is gained';
    Top     := CheckBoxes[CHECKBOX_ANTIBAN_DEATH].Top + Height + _SPACING;
    Left    := CheckBoxes[CHECKBOX_ANTIBAN_DEATH].Left;
    Hint    := 'If a player gains a level, it will use quick-chat to say the new level of that gained skill.';
  end;

  CheckBoxes[CHECKBOX_ANTIBAN_NP] := _TCheckBox(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with CheckBoxes[CHECKBOX_ANTIBAN_NP] do
  begin
    Parent  := Edits[EDIT_ANTIBAN_PLAYERS].Parent;
    Caption := '  Random next player (multiplayer only)';
    Top     := CheckBoxes[CHECKBOX_ANTIBAN_QC].Top + Height + _SPACING;
    Left    := CheckBoxes[CHECKBOX_ANTIBAN_QC].Left;
    Hint    := 'When switching players, will switch to a random player rather than the next player.';
  end;

  CheckBoxes[CHECKBOX_ANTIBAN_WORLD] := _TCheckBox(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with CheckBoxes[CHECKBOX_ANTIBAN_WORLD] do
  begin
    Parent  := Edits[EDIT_ANTIBAN_PLAYERS].Parent;
    Caption := '  Switch worlds when logging in';
    Top     := CheckBoxes[CHECKBOX_ANTIBAN_NP].Top + Height + _SPACING;
    Left    := CheckBoxes[CHECKBOX_ANTIBAN_NP].Left;
    Hint    := 'Will switch worlds after taking breaks or switching players.';
  end;

  CheckBoxes[CHECKBOX_ANTIBAN_RTOOL] := _TCheckBox(SettingsTabs[TAB_SETTING_ANTIBAN]);
  with CheckBoxes[CHECKBOX_ANTIBAN_RTOOL] do
  begin
    Parent  := Edits[EDIT_ANTIBAN_PLAYERS].Parent;
    Caption := '  Use SRL''s Random Tool';
    Top     := Edits[EDIT_ANTIBAN_PLAYERS].Top;
    Left    := 300;
    Checked := true;
    Hint    := 'Plays a sound when a random event is found.';
  end;
end;

procedure initSettingsAdvanced();
begin
  SettingsTabs[TAB_SETTING_ADVANCED].Caption := 'Advanced';

  Edits[EDIT_ADVANCE_ANTIBAN] := _TEdit(SettingsTabs[TAB_SETTING_ADVANCED]);
  with Edits[EDIT_ADVANCE_ANTIBAN] do
  begin
    Parent := SettingsTabs[TAB_SETTING_ADVANCED];
    Top    := _SPACING;
    Left   := _SPACING;
    Width  := 75;
    Text   := '15000';
    Hint   := 'The interval (in milliseconds) to perform antiban.';
    Font.Style := [];
    Font.Color := clBlack;
  end;

  Edits[EDIT_ADVANCE_RANDOMS] := _TEdit(SettingsTabs[TAB_SETTING_ADVANCED]);
  with Edits[EDIT_ADVANCE_RANDOMS] do
  begin
    Parent := Edits[EDIT_ADVANCE_ANTIBAN].Parent;
    Top    := Edits[EDIT_ADVANCE_ANTIBAN].Top + Height + _SPACING;
    Left   := Edits[EDIT_ADVANCE_ANTIBAN].Left;
    Width  := 75;
    Text   := '15000';
    Hint   := 'The interval (in milliseconds) to check for random events.';
    Font.Style := [];
    Font.Color := clBlack;
  end;

  Labels[LABEL_ADVANCE_ANTIBAN] := TLabel.Create(SettingsTabs[TAB_SETTING_ADVANCED]);
  with Labels[LABEL_ADVANCE_ANTIBAN] do
  begin
    Parent  := Edits[EDIT_ADVANCE_ANTIBAN].Parent;
    Caption := 'Perform antiban inverval (ms)';
    Left    := Edits[EDIT_ADVANCE_ANTIBAN].Left + Edits[EDIT_ADVANCE_ANTIBAN].Width + _SPACING;
    Top     := Edits[EDIT_ADVANCE_ANTIBAN].Top + _EDIT_LABEL;
  end;

  Labels[LABEL_ADVANCE_RANDOMS] := TLabel.Create(SettingsTabs[TAB_SETTING_ADVANCED]);
  with Labels[LABEL_ADVANCE_RANDOMS] do
  begin
    Parent  := Edits[EDIT_ADVANCE_ANTIBAN].Parent;
    Caption := 'Check for randoms interval (ms)';
    Left    := Edits[EDIT_ADVANCE_RANDOMS].Left + Edits[EDIT_ADVANCE_RANDOMS].Width + _SPACING;
    Top     := Edits[EDIT_ADVANCE_RANDOMS].Top + _EDIT_LABEL;
  end;
end;

procedure initGlobalSettings();
var
  i: integer;
begin
  SettingsPageControl := TPageControl.Create(Panels[PANEL_SETTINGS]);
  with SettingsPageControl do
  begin
    Parent := Panels[PANEL_SETTINGS];
    Align := alClient;
  end;

  for i := low(SettingsTabs) to high(SettingsTabs) do
  begin
    SettingsTabs[i] := TTabSheet.Create(Panels[PANEL_SETTINGS]);
    SettingsTabs[i].PageControl := SettingsPageControl;
  end;

  initSettingsSMART();
  initSettingsStats();
  initSettingsCPU();
  initSettingsDebug();
  initSettingsAntiban();
  initSettingsAdvanced();
end;

// Initiates the script list form ~ include: scriptList.simba
procedure initScriptsList();
var
  i: integer;
begin
  Forms[FORM_SCRIPT_LIST] := TForm.Create(Forms[FORM_MAIN]);
  with Forms[FORM_SCRIPT_LIST] do
  begin
    Width   := 300;
    Height  := 400;
    Caption := 'MSI''s Supported Scripts';
  end;

  Lists[LIST_ALL_SCRIPTS] := TListBox.Create(Forms[FORM_SCRIPT_LIST]);
  with Lists[LIST_ALL_SCRIPTS] do
  begin
    Parent := Forms[FORM_SCRIPT_LIST];
    Top    := 0;
    Left   := 0;
    Width  := Forms[FORM_SCRIPT_LIST].Width;
    Height := Forms[FORM_SCRIPT_LIST].Height - 40;
    Color  := COLOR_BACKGROUND;
    Hint   := 'Select which script you want to Add';

    Font.Color := COLOR_FONT;
    OnClick := @SL_ExpandTree;
    OnDblClick := @SL_AddScript;
  end;

  SL_SetTrees();
  for i := 0 to high(SL_Trees) do
  begin
    SL_TreeIndexes[i] := -1;

    if (length(SL_Trees[i]) <= 0) then
      continue;

    Lists[LIST_ALL_SCRIPTS].Items.Add('+  ' + skillToStr(i));
    SL_TreeIndexes[i] := Lists[LIST_ALL_SCRIPTS].Items.Count;
  end;

  Buttons[BUTTON_SCRIPT_LIST_ADD] := _TButton(Forms[FORM_SCRIPT_LIST]);
  with Buttons[BUTTON_SCRIPT_LIST_ADD] do
  begin
    Parent  := Lists[LIST_ALL_SCRIPTS].Parent;
    Width   := 60;
    Top     := (Lists[LIST_ALL_SCRIPTS].Height + 7);
    Left    := Forms[FORM_SCRIPT_LIST].Width / 2 - (Width + (_SPACING / 2));
    Hint    := 'Adds the selected script to the player''s script list';
    Caption := 'Add';
    OnClick := @SL_AddScript;
    Enabled := false;
  end;

  Buttons[BUTTON_SCRIPT_LIST_CANCEL] := _TButton(Forms[FORM_SCRIPT_LIST]);
  with Buttons[BUTTON_SCRIPT_LIST_CANCEL] do
  begin
    Parent  := Lists[LIST_ALL_SCRIPTS].Parent;
    Width   := Buttons[BUTTON_SCRIPT_LIST_ADD].Width;
    Top     := Buttons[BUTTON_SCRIPT_LIST_ADD].Top;
    Left    := Forms[FORM_SCRIPT_LIST].Width / 2 + (_SPACING / 2);
    Hint    := 'Close script list without saving';
    Caption := 'Cancel';
  end;
end;

procedure initScriptsSettings();
begin
  Forms[FORM_SCRIPT_SETUP] := TForm.Create(Forms[FORM_MAIN]);
  with Forms[FORM_SCRIPT_SETUP] do
  begin
    Width   := 300;
    Height  := 500;
    Caption := 'Script Settings';
    Visible := false;
  end;
end;

procedure initPlayerAdvanced();
var
  i: integer;
  s: TStringArray;
begin
  Forms[FORM_SETTINGS_PLAYER] := TForm.Create(Forms[FORM_MAIN]);
  with Forms[FORM_SETTINGS_PLAYER] do
  begin
    Width   := 320;
    Height  := 260;
    Visible := false;
    Caption := 'Advanced Settings (optional)';
  end;

  Labels[LABEL_LAMPSKILL] := TLabel.Create(Forms[FORM_SETTINGS_PLAYER]);
  with Labels[LABEL_LAMPSKILL] do
  begin
    Parent  := Forms[FORM_SETTINGS_PLAYER];
    Top     := _SPACING;
    Left    := Forms[FORM_SETTINGS_PLAYER].Width / 2 - _SPACING - 125;
    Caption := 'Lamp skill';
  end;

  ComboBoxes[COMBOBOX_LAMPSKILL] := TComboBox.Create(Forms[FORM_SETTINGS_PLAYER]);
  with ComboBoxes[COMBOBOX_LAMPSKILL] do
  begin
    Parent := Labels[LABEL_LAMPSKILL].Parent;
    Top    := Labels[LABEL_LAMPSKILL].Top + Labels[LABEL_LAMPSKILL].Height;
    Left   := Labels[LABEL_LAMPSKILL].Left;
    Width  := 125;
    Height := 20;
    Text   := 'Mining';
    Hint   := 'Choose the skill you want to gain from experience lamps';

    ShowHint := true;

    for i := 0 to (SKILL_COUNT - 2) do
      Items.Add(capitalize(skillToStr(i)));
  end;

  Edits[EDIT_TIME_TOTAL] := _TEdit(Forms[FORM_SETTINGS_PLAYER]);
  with Edits[EDIT_TIME_TOTAL] do
  begin
    Parent := ComboBoxes[COMBOBOX_LAMPSKILL].Parent;
    Top    := ComboBoxes[COMBOBOX_LAMPSKILL].Top + ComboBoxes[COMBOBOX_LAMPSKILL].Height + _SPACING;
    Left   := ComboBoxes[COMBOBOX_LAMPSKILL].Left;
    Width  := ComboBoxes[COMBOBOX_LAMPSKILL].Width;
    Name   := 'TotalTime';
    Hint   := 'The total time for this player to run in minutes (leave to run forever)'
  end;

  Edits[EDIT_LOADS_TOTAL] := _TEdit(Forms[FORM_SETTINGS_PLAYER]);
  with Edits[EDIT_LOADS_TOTAL] do
  begin
    Parent := Edits[EDIT_TIME_TOTAL].Parent;
    Top    := Edits[EDIT_TIME_TOTAL].Top + Edits[EDIT_TIME_TOTAL].Height + _SPACING;
    Left   := Edits[EDIT_TIME_TOTAL].Left;
    Width  := Edits[EDIT_TIME_TOTAL].Width;
    Name   := 'TotalLoads';
    Hint   := 'The total loads for this player to run (leave to run forever)'
  end;

  Edits[EDIT_TIME_BREAK] := _TEdit(Forms[FORM_SETTINGS_PLAYER]);
  with Edits[EDIT_TIME_BREAK] do
  begin
    Parent := Edits[EDIT_LOADS_TOTAL].Parent;
    Top    := Edits[EDIT_LOADS_TOTAL].Top + Edits[EDIT_LOADS_TOTAL].Height + _SPACING;
    Left   := Edits[EDIT_LOADS_TOTAL].Left;
    Width  := Edits[EDIT_LOADS_TOTAL].Width;
    Name   := 'BreakAfter';
    Hint   := 'Break after how long? (minutes).  Leave if not taking breaks.'
  end;

  Edits[EDIT_LOADS_BREAK] := _TEdit(Forms[FORM_SETTINGS_PLAYER]);
  with Edits[EDIT_LOADS_BREAK] do
  begin
    Parent := Edits[EDIT_TIME_BREAK].Parent;
    Top    := Edits[EDIT_TIME_BREAK].Top + Edits[EDIT_TIME_BREAK].Height + _SPACING;
    Left   := Edits[EDIT_TIME_BREAK].Left;
    Width  := Edits[EDIT_TIME_BREAK].Width;
    Name   := 'BreakLoads';
    Hint   := 'Loads to do before breaking (single player) or switching ' +
              'players (multiplayer).  Leave if you don''t want to break.'
  end;

  Edits[EDIT_BREAK_FOR] := _TEdit(Forms[FORM_SETTINGS_PLAYER]);
  with Edits[EDIT_BREAK_FOR] do
  begin
    Parent := Edits[EDIT_LOADS_BREAK].Parent;
    Top    := Edits[EDIT_LOADS_BREAK].Top + Edits[EDIT_LOADS_BREAK].Height + _SPACING;
    Left   := Edits[EDIT_LOADS_BREAK].Left;
    Width  := Edits[EDIT_TIME_TOTAL].Width;
    Name   := 'BreakFor';
    Hint   := 'How long to break for (single player)'
  end;

  Labels[LABEL_REWARDS] := TLabel.Create(Forms[FORM_SETTINGS_PLAYER]);
  with Labels[LABEL_REWARDS] do
  begin
    Parent  := Labels[LABEL_LAMPSKILL].Parent;
    Top     := Labels[LABEL_LAMPSKILL].Top;
    Left    := Forms[FORM_SETTINGS_PLAYER].Width / 2 + _SPACING;
    Caption := 'Reward box rewards';
  end;

  CheckLists[CHECKLIST_REWARDS] := TCheckListBox.Create(Forms[FORM_SETTINGS_PLAYER]);
  with CheckLists[CHECKLIST_REWARDS] do
  begin
    Parent   := Labels[LABEL_REWARDS].Parent;
    Left     := Labels[LABEL_REWARDS].Left
    Top      := Labels[LABEL_REWARDS].Top + Labels[LABEL_REWARDS].Height;
    Width    := 125;
    Height   := Edits[EDIT_BREAK_FOR].Top + Edits[EDIT_BREAK_FOR].Height - Top + 2;
    Hint     := 'Check off the rewards you want from random events (XP is default)';
    ShowHint := true;

    s := ['XP Lamp', 'Costume', 'Coins', 'Gem', 'Clay Ore', 'Coal Ore', 'Mystery Box', 'Emote'];
    for i := 0 to high(s) do
      Items.Add(s[i]);
  end;

  Buttons[BUTTON_PLAYER_SAVE] := _TButton(Forms[FORM_SETTINGS_PLAYER]);
  with Buttons[BUTTON_PLAYER_SAVE] do
  begin
    Parent  := Edits[EDIT_TIME_TOTAL].Parent;
    Caption := 'Save';
    Hint    := 'Save the player''s settings';
    Width   := 100;
    Top     := Edits[EDIT_BREAK_FOR].Top + Edits[EDIT_BREAK_FOR].Height + (_SPACING * 2);
    Left    := Forms[FORM_SETTINGS_PLAYER].Width / 2 - (Width + (_SPACING / 2));
  end;

  Buttons[BUTTON_PLAYER_CANCEL] := _TButton(Forms[FORM_SETTINGS_PLAYER]);
  with Buttons[BUTTON_PLAYER_CANCEL] do
  begin
    Parent  := Edits[EDIT_TIME_TOTAL].Parent;
    Caption := 'Cancel';
    Hint    := 'Cancel without saving player''s settings';
    Width   := Buttons[BUTTON_PLAYER_SAVE].Width;
    Top     := Buttons[BUTTON_PLAYER_SAVE].Top;
    Left    := Forms[FORM_SETTINGS_PLAYER].Width / 2 + (_SPACING / 2);
  end;
end;

procedure initPlayerSetup();
begin
  Lists[LIST_PLAYERS] := _TListBox(Panels[PANEL_PLAYER]);
  with Lists[LIST_PLAYERS] do
  begin
    Parent := Panels[PANEL_PLAYER];
    Top    := 10 + _SPACING;
    Width  := 150;
    Left   := _SPACING;
    Hint   := 'A list of all your players.  Double click to open advanded settings.';
    Height := Panels[PANEL_PLAYER].Height - Lists[LIST_PLAYERS].Top - 50;
  end;

  Buttons[BUTTON_ADVANCED_PLAYER] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_ADVANCED_PLAYER] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Width   := Lists[LIST_PLAYERS].Width;
    Top     := Lists[LIST_PLAYERS].Top + Lists[LIST_PLAYERS].Height + _SPACING;
    Left    := Lists[LIST_PLAYERS].Left;
    Height  := 30;
    Hint    := 'Opens an advanced settings window for the selected player';
    Caption := 'Advanced Player Settings';
    Enabled := false;
  end;

  Labels[LABEL_PLAYERS] := TLabel.Create(Forms[FORM_MAIN]);
  with Labels[LABEL_PLAYERS] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Caption := 'Player List';
    Top     := Lists[LIST_PLAYERS].Top - Labels[LABEL_PLAYERS].Height;
    Left    := Lists[LIST_PLAYERS].Left;
  end;

  Edits[EDIT_USERNAME] := _TEdit(Forms[FORM_MAIN]);
  with Edits[EDIT_USERNAME] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Top    := Lists[LIST_PLAYERS].Top;
    Left   := Lists[LIST_PLAYERS].Left + Lists[LIST_PLAYERS].Width + _SPACING;
    Name   := 'Username';
    Hint   := 'Your Runescape login name or email';
  end;

  Edits[EDIT_PASSWORD] := _TEdit(Forms[FORM_MAIN]);
  with Edits[EDIT_PASSWORD] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Top    := Edits[EDIT_USERNAME].Top + Height + _SPACING;
    Left   := Edits[EDIT_USERNAME].Left;
    Name   := 'Password';
    Hint   := 'Your Runescape password';
    Tag    := $01;
  end;

  Edits[EDIT_PIN] := _TEdit(Forms[FORM_MAIN]);
  with Edits[EDIT_PIN] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Top    := Edits[EDIT_PASSWORD].Top + Height + _SPACING;
    Left   := Edits[EDIT_USERNAME].Left;
    Name   := 'Pin';
    Hint   := 'Your Runescape bank pin (leave blank if you don''t have one)';
    Tag    := $01;
    MaxLength := 4;
  end;

  CheckBoxes[CHECKBOX_ACTIVE] := _TCheckBox(Forms[FORM_MAIN]);
  with CheckBoxes[CHECKBOX_ACTIVE] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Left   := Edits[EDIT_USERNAME].Left + 1;
    Top    := Edits[EDIT_PIN].Top + Edits[EDIT_PIN].Height + _SPACING;
    Hint   := 'Do you want to use this player?';
    Caption := '  Active';
  end;

  CheckBoxes[CHECKBOX_MEMBER] := _TCheckBox(Forms[FORM_MAIN]);
  with CheckBoxes[CHECKBOX_MEMBER] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Left   := CheckBoxes[CHECKBOX_ACTIVE].Left;
    Top    := CheckBoxes[CHECKBOX_ACTIVE].Top + CheckBoxes[CHECKBOX_ACTIVE].Height + _SPACING;
    Hint   := 'Is this player a Runescape member?';
    Caption := '  Member';
  end;

  Buttons[BUTTON_PLAYER_ADD] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_PLAYER_ADD] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Width   := Edits[EDIT_USERNAME].Width / 2 - (_SPACING / 2);
    Top     := Lists[LIST_PLAYERS].Top + Lists[LIST_PLAYERS].Height - Height;
    Left    := Edits[EDIT_USERNAME].Left;
    Hint    := 'Adds the player with the current settings to the Player List';
    Caption := '+';
    Font.Size := 10;
  end;

  Buttons[BUTTON_PLAYER_DELETE] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_PLAYER_DELETE] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Width   := Buttons[BUTTON_PLAYER_ADD].Width;
    Top     := Buttons[BUTTON_PLAYER_ADD].Top;
    Left    := Buttons[BUTTON_PLAYER_ADD].Left + Buttons[BUTTON_PLAYER_ADD].Width + _SPACING;
    Hint    := 'Removes the selected player from the Player List';
    Caption := '-';
    Enabled := false;
    Font.Size := Buttons[BUTTON_PLAYER_ADD].Font.Size;
  end;

  Lists[LIST_PLAYER_SCRIPTS] := _TListBox(Forms[FORM_MAIN]);
  with Lists[LIST_PLAYER_SCRIPTS] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Top    := Lists[LIST_PLAYERS].Top;
    Width  := Lists[LIST_PLAYERS].Width;
    Height := Buttons[BUTTON_PLAYER_DELETE].Top + Buttons[BUTTON_PLAYER_DELETE].Height - Top;
    Left   := Edits[EDIT_USERNAME].Left + Edits[EDIT_USERNAME].Width + _SPACING + 9;
    Hint   := 'A list of all the selected player''s scripts. Double click to open advanced settings.';
  end;

  Buttons[BUTTON_SCRIPT_ADD] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_SCRIPT_ADD] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Top     := Lists[LIST_PLAYER_SCRIPTS].Top;
    Width   := 100;
    Left    := Lists[LIST_PLAYER_SCRIPTS].Left + Lists[LIST_PLAYER_SCRIPTS].Width + _SPACING;
    Hint    := 'Click to Add a script for the current player';
    Caption := 'Add Script';
    Enabled := false;
  end;

  Buttons[BUTTON_SCRIPT_DELETE] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_SCRIPT_DELETE] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Top     := Buttons[BUTTON_SCRIPT_ADD].Top + Height + _SPACING;
    Width   := Buttons[BUTTON_SCRIPT_ADD].Width;
    Left    := Buttons[BUTTON_SCRIPT_ADD].Left;
    Hint    := 'Click to remove the selected script from the list';
    Caption := 'Delete Script';
    Enabled := false;
  end;

  Buttons[BUTTON_SCRIPT_SETTINGS] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_SCRIPT_SETTINGS] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Top     := Buttons[BUTTON_SCRIPT_DELETE].Top + Height + _SPACING;
    Width   := Buttons[BUTTON_SCRIPT_DELETE].Width;
    Left    := Buttons[BUTTON_SCRIPT_DELETE].Left;
    Hint    := 'Click or double click script in list to customize script settings';
    Caption := 'Script Settings';
    Enabled := false;
  end;

  Labels[LABEL_SCRIPTS] := TLabel.Create(Forms[FORM_MAIN]);
  with Labels[LABEL_SCRIPTS] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Caption := 'Player''s Scripts';
    Top     := Lists[LIST_PLAYER_SCRIPTS].Top - Labels[LABEL_SCRIPTS].Height;
    Left    := Lists[LIST_PLAYER_SCRIPTS].Left;
  end;

  CheckBoxes[CHECKBOX_APPLY_ALL] := _TCheckBox(Forms[FORM_MAIN]);
  with CheckBoxes[CHECKBOX_APPLY_ALL] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Left   := Buttons[BUTTON_SCRIPT_SETTINGS].Left + 1;
    Top    := Buttons[BUTTON_SCRIPT_SETTINGS].Top + Buttons[BUTTON_SCRIPT_SETTINGS].Height + _SPACING;;
    Hint   := 'Apply the current settings to all players.';
    Caption := '  Apply to all';
  end;

  Buttons[BUTTON_START_SCRIPT] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_START_SCRIPT] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Top     := Panels[PANEL_PLAYER].Height - Height - _SPACING;
    Width   := 100;
    Left    := Panels[PANEL_PLAYER].Width - Width - _SPACING;
    Hint    := 'Click to start the script.';
    Caption := 'Start Script';
  end;

  initPlayerAdvanced();
end;

procedure formInit();
var
  i: integer;
begin
  Forms[FORM_MAIN] := TForm.Create(nil);
  with Forms[FORM_MAIN] do
  begin
    Width   := 559;
    Height := 324
    Caption := 'MSI Phoenix ~ Multiple Script Integration @ SRL-Forums';
    OnPaint := @_Paint;
  end;

  initMainMenu();
  initScriptsList();

  OpenDialog := TOpenDialog.Create(Forms[FORM_MAIN]);
  OpenDialog.Title := ' Choose a player file to open';

  SaveDialog := TSaveDialog.Create(Forms[FORM_MAIN]);
  SaveDialog.Title := ' Save your player file';
  SaveDialog.DefaultExt := '.txt';

  Buttons[BUTTON_SETTINGS] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_SETTINGS] do
  begin
    Parent  := Forms[FORM_MAIN];
    Width   := 150;
    Top     := 10;
    Left    := 10;
    Hint    := 'Takes you to the script settings page';
    Caption := '<< Global Settings     ';
  end;

  Labels[LABEL_TITLE] := TLabel.Create(Forms[FORM_MAIN]);
  with Labels[LABEL_TITLE] do
  begin
    Parent      := Forms[FORM_MAIN];
    Top         := 8;
    Left        := 220;
    Font.Height := 25;
  end;

  Buttons[BUTTON_PLAYER] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_PLAYER] do
  begin
    Parent  := Forms[FORM_MAIN];
    Width   := Buttons[BUTTON_SETTINGS].Width;
    Top     := Buttons[BUTTON_SETTINGS].Top;
    Left    := Parent.Width - (Width + 10);
    Hint    := 'Takes you to the player setup page';
    Caption := '     Player Setup >>';
  end;

  for i := low(Panels) to high(Panels) do
  begin
    Panels[i] := TPanel.Create(Forms[FORM_MAIN]);
    with Panels[i] do
    begin
      Parent     := Forms[FORM_MAIN];
      Left       := 0;
      Top        := 50;
      Height     := Forms[FORM_MAIN].Height - Top - _MENUHEIGHT;
      Width      := Forms[FORM_MAIN].Width;
      BevelWidth := 0;
      Visible    := false;
      Color      := COLOR_BACKGROUND;
    end;
  end;

  with Panels[PANEL_MAIN] do
  begin
    Visible := true;
    Top     := 0;
    Height  := Parent.Height;
  end;

  initIntro();
  initGlobalSettings();
  initScriptsSettings();
  initPlayerSetup();

  // Set the common attributes for all Forms/components
  for i := low(Forms) to high(Forms) do
    with Forms[i] do
    begin
      BorderStyle := bsSingle;
      BorderIcons := [biSystemMenu];
      Position    := poScreenCenter;
      Color       := COLOR_BACKGROUND;
    end;

  for i := low(Labels) to high(Labels) do
    with Labels[i] do
    begin
      Font.Color := COLOR_FONT;
    end;

  Forms[FORM_MAIN].ShowModal;
end;

procedure formSafeCall(proc: string);
var
  v: TVariantArray;
begin
  setLength(v, 0);
  threadSafeCall(proc, v);
end;

procedure formFree();
begin
  Forms[FORM_MAIN].free();
end;

{$IFDEF FORM_TESTING}
begin
  ClearDebug();
  MSI_Setup();
  MSI_FreeAllItems();

  try
    try
      formSafeCall('formInit');
    finally
      formSafeCall('formFree');
    end;
  except
    writeln(ExceptionToString(ExceptionType, ExceptionParam));
  end;

  if (MSI_ScriptReady) then
    writeln('MSI is ready!');
end.
{$ENDIF}

