{$DEFINE FORM_TESTING}

{$IFDEF FORM_TESTING}
  {$DEFINE SRL5}
  {$i msi/msi/core/setup.simba}
{$ENDIF}

const
  _SPACING    = 10; // spacing between components
  _MENUHEIGHT = 20; // the main menu is X pixels in Height

  COLOR_BACKGROUND       = clDefault;
  COLOR_FONT             = clBlack;

// component constants
const
  FORM_COUNT = 4;
    FORM_MAIN            = 1;
    FORM_SETTINGS_PLAYER = 2;
    FORM_SCRIPT_SETUP    = 3;
    FORM_SCRIPT_LIST     = 4;

  MENU_COUNT = 4;
    MENU_FILE = 1;
      ITEM_NEW     = 1;
      ITEM_LOAD    = 2;
      ITEM_SAVE    = 3;
      ITEM_SAVE_AS = 4;
      ITEM_DEFAULT = 5;
      ITEM_CLOSE   = 4;

    MENU_START = 2;
      ITEM_MAIN = 1;
      ITEM_RUN  = 2;

    MENU_FEEDBACK = 3;
      ITEM_BUG        = 1;
      ITEM_SUGGESTION = 2;
      ITEM_REPORTS    = 3;
      ITEM_CONTRIBUTE = 4;

    MENU_HELP = 4;
      ITEM_FORUM = 1;
      ITEM_HELP  = 2;
      ITEM_DOC   = 3;
      ITEM_ABOUT = 4;

  PANEL_COUNT = 3;
    PANEL_MAIN     = 1;
    PANEL_PLAYER   = 2;
    PANEL_SETTINGS = 3;

  LIST_COUNT = 3;
    LIST_PLAYERS        = 1;
    LIST_PLAYER_SCRIPTS = 2;
    LIST_ALL_SCRIPTS    = 3;

  CHECKLIST_COUNT = 1;
    CHECKLIST_REWARDS = 1;

  EDIT_COUNT = 8;
    EDIT_USERNAME       = 1;
    EDIT_PASSWORD    = 2;
    EDIT_PIN         = 3;
    EDIT_TIME_BREAK  = 4;
    EDIT_TIME_TOTAL  = 5;
    EDIT_LOADS_BREAK = 6;
    EDIT_LOADS_TOTAL = 7;
    EDIT_BREAK_FOR   = 8;

  COMBOBOX_COUNT = 1;
    COMBOBOX_LAMPSKILL = 1;

  CHECKBOX_COUNT = 3;
    CHECKBOX_ACTIVE    = 1;
    CHECKBOX_MEMBER    = 2;
    CHECKBOX_APPLY_ALL = 3;

  BUTTON_COUNT = 13;
    BUTTON_CONTINUE           = 1;
    BUTTON_SETTINGS           = 2;
    BUTTON_PLAYER             = 3;
    BUTTON_PLAYER_ADD         = 4;
    BUTTON_PLAYER_DELETE      = 5;
    BUTTON_PLAYER_SAVE        = 6;
    BUTTON_PLAYER_CANCEL      = 7;
    BUTTON_SCRIPT_ADD         = 8;
    BUTTON_SCRIPT_DELETE      = 9;
    BUTTON_SCRIPT_SETTINGS    = 10;
    BUTTON_SCRIPT_LIST_ADD    = 11;
    BUTTON_SCRIPT_LIST_CANCEL = 12;
    BUTTON_ADVANCED_PLAYER    = 13;

  LABEL_COUNT = 8;
    LABEL_PLAYERS   = 1;
    LABEL_SCRIPTS   = 2;
    LABEL_ACTIVE    = 3;
    LABEL_MEMBER    = 4;
    LABEL_LAMPSKILL = 5;
    LABEL_REWARDS   = 6;
    LABEL_TITLE     = 7;
    LABEL_APPLY_ALL = 8;

// Other variables
var
  MSI_Ready: Boolean;

// Form components
var
  Forms: array[1..FORM_COUNT] of TForm;

  MainMenu: TMainMenu;
  MainMenuItems: array[1..MENU_COUNT] of array of TMenuItem;

  Panels     : array[1..PANEL_COUNT] of TPanel;
  Lists      : array[1..LIST_COUNT] of TListBox;
  Edits      : array[1..EDIT_COUNT] of TEdit;
  Labels     : array[1..LABEL_COUNT] of TLabel;
  ComboBoxes : array[1..COMBOBOX_COUNT] of TComboBox;
  Buttons    : array[1..BUTTON_COUNT] of TButton;
  CheckBoxes : array[1..CHECKBOX_COUNT] of TCheckBox;
  CheckLists : array[1..CHECKLIST_COUNT] of TCheckListBox;

  OpenDialog : TOpenDialog;
  SaveDialog : TSaveDialog;

  ScriptReady: Boolean;

{$i msi/msi/form/misc.simba}
{$i msi/msi/form/events.simba}
{$i msi/msi/form/defaults.simba}
{$i msi/msi/form/scriptList.simba}
{$i msi/msi/form/mainmenu.simba}

{
type
  TSkillForm = record
    name: integer;
    numberOfLists, numberOfEdits, numberOfCombos: integer;
    labelsLists, labelsEdits, labelsCombos: TStringArray;
    skillLists: array of TCheckListBox;
    skillEdits: array of TEdit;
    skillCombos: array of TComboBox;
  end;

function getSkillForm(skill: integer): TSkillForm;
begin
  case skill of
    SKILL_WOODCUTTING: ;
    SKILL_MINING: ;
    SKILL_FISHING: ;
    SKILL_COOKING: ;
    SKILL_MAGIC: ;
    SKILL_NONE: ;

    else
      MSI_SubDebug('[FORM] Invalid skill in getSkillForm');
  end;
end;

procedure createSkillForm(skill: integer);
begin
end;
}

// Credit to Dan Cardin (http://villavu.com/forum/showthread.php?t=39078)
// Initiates the main menu at the top of the form ~ include mainmenu.simba
procedure initMainMenu();
var
  i, j: integer;
  mainMenuNames: array[1..MENU_COUNT] of TStringArray;
begin
  // The first one ('File') is the heading, the rest are sub-options
  mainMenuNames[MENU_FILE]     := ['File', 'New', 'Open', 'Save', 'Save as...', 'Save as Default', 'Close'];
  mainMenuNames[MENU_START]    := ['Start', 'Show Logo', 'Run'];
  mainMenuNames[MENU_FEEDBACK] := ['Feedback', 'Report a bug', 'Suggest a feature', 'Progress Reports', 'Want to contribute?'];
  mainMenuNames[MENU_HELP]     := ['Help', 'SRL-Forums', 'MSI Help', 'Documentation', 'What is MSI?'];

  MainMenu := TMainMenu.Create(Forms[FORM_MAIN]);

  for i := low(MainMenuItems) to high(MainMenuItems) do
  begin
    setLength(MainMenuItems[i], length(mainMenuNames[i]));

    for j := low(MainMenuItems[i]) to high(MainMenuItems[i]) do
    begin
      MainMenuItems[i][j] := TMenuItem.Create(Forms[FORM_MAIN]);
      MainMenuItems[i][j].Caption := mainMenuNames[i][j];

      if (j = low(MainMenuItems[i])) then
        MainMenu.Items.Add(MainMenuItems[i][j])
      else
        MainMenu.Items.Items[i - 1].Add(MainMenuItems[i][j]);

      MainMenuItems[i][j].OnClick := @MM_Click;
    end;
  end;
end;

procedure initIntro();
begin
  Buttons[BUTTON_CONTINUE] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_CONTINUE] do
  begin
    Parent  := Panels[PANEL_MAIN];
    Width   := 100;
    Top     := Parent.Height - 55;
    Left    := Parent.Width - (Width + 10);
    Caption := 'Continue >>';
    Hint    := 'Click to continue to setup MSI';
  end;
end;

procedure initGlobalSettings();
begin
end;

// Initiates the script list form ~ include: scriptList.simba
procedure initScriptsList();
var
  i: integer;
begin
  Forms[FORM_SCRIPT_LIST] := TForm.Create(Forms[FORM_MAIN]);
  with Forms[FORM_SCRIPT_LIST] do
  begin
    Width   := 300;
    Height  := 400;
    Caption := 'MSI''s Supported Scripts';
  end;

  Lists[LIST_ALL_SCRIPTS] := TListBox.Create(Forms[FORM_SCRIPT_LIST]);
  with Lists[LIST_ALL_SCRIPTS] do
  begin
    Parent := Forms[FORM_SCRIPT_LIST];
    Top    := 0;
    Left   := 0;
    Width  := Forms[FORM_SCRIPT_LIST].Width;
    Height := Forms[FORM_SCRIPT_LIST].Height - 40;
    Color  := COLOR_BACKGROUND;
    Hint   := 'Select which script you want to Add';

    Font.Color := COLOR_FONT;
    OnClick := @SL_Click;
    OnDblClick := @SL_DoubleClick;
  end;

  SL_SetElements();
  for i := 0 to high(SL_Elements) do
  begin
    SL_ElementIndexes[i] := -1;

    if (length(SL_Elements[i]) <= 0) then
      continue;

    Lists[LIST_ALL_SCRIPTS].Items.Add('+  ' + skillToStr(i));
    SL_ElementIndexes[i] := Lists[LIST_ALL_SCRIPTS].Items.Count;
  end;

  Buttons[BUTTON_SCRIPT_LIST_ADD] := _TButton(Forms[FORM_SCRIPT_LIST]);
  with Buttons[BUTTON_SCRIPT_LIST_ADD] do
  begin
    Parent  := Lists[LIST_ALL_SCRIPTS].Parent;
    Width   := 60;
    Top     := (Lists[LIST_ALL_SCRIPTS].Height + 7);
    Left    := Forms[FORM_SCRIPT_LIST].Width / 2 - (Width + (_SPACING / 2));
    Hint    := 'Adds the selected script to the player''s script list';
    Caption := 'Add';
    OnClick := @SL_DoubleClick;
    Enabled := false;
  end;

  Buttons[BUTTON_SCRIPT_LIST_CANCEL] := _TButton(Forms[FORM_SCRIPT_LIST]);
  with Buttons[BUTTON_SCRIPT_LIST_CANCEL] do
  begin
    Parent  := Lists[LIST_ALL_SCRIPTS].Parent;
    Width   := Buttons[BUTTON_SCRIPT_LIST_ADD].Width;
    Top     := Buttons[BUTTON_SCRIPT_LIST_ADD].Top;
    Left    := Forms[FORM_SCRIPT_LIST].Width / 2 + (_SPACING / 2);
    Hint    := 'Close script list without saving';
    Caption := 'Cancel';
  end;
end;

procedure initScriptsSettings();
begin
  Forms[FORM_SCRIPT_SETUP] := TForm.Create(Forms[FORM_MAIN]);
  with Forms[FORM_SCRIPT_SETUP] do
  begin
    Width   := 300;
    Height  := 500;
    Caption := 'Script Settings';
    Visible := false;
  end;
end;

procedure initPlayerAdvanced();
var
  i: integer;
  s: TStringArray;
begin
  Forms[FORM_SETTINGS_PLAYER] := TForm.Create(Forms[FORM_MAIN]);
  with Forms[FORM_SETTINGS_PLAYER] do
  begin
    Width   := 320;
    Height  := 260;
    Visible := false;
    Caption := 'Advanced Settings (optional)';
  end;

  Labels[LABEL_LAMPSKILL] := TLabel.Create(Forms[FORM_SETTINGS_PLAYER]);
  with Labels[LABEL_LAMPSKILL] do
  begin
    Parent  := Forms[FORM_SETTINGS_PLAYER];
    Top     := _SPACING;
    Left    := Forms[FORM_SETTINGS_PLAYER].Width / 2 - _SPACING - 125;
    Caption := 'Lamp skill';
  end;

  ComboBoxes[COMBOBOX_LAMPSKILL] := TComboBox.Create(Forms[FORM_SETTINGS_PLAYER]);
  with ComboBoxes[COMBOBOX_LAMPSKILL] do
  begin
    Parent := Labels[LABEL_LAMPSKILL].Parent;
    Top    := Labels[LABEL_LAMPSKILL].Top + Labels[LABEL_LAMPSKILL].Height;
    Left   := Labels[LABEL_LAMPSKILL].Left;
    Width  := 125;
    Height := 20;
    Text   := 'Mining';
    Hint   := 'Choose the skill you want to gain from experience lamps';

    ShowHint := true;

    for i := 0 to (SKILL_COUNT - 2) do
      Items.Add(capitalize(skillToStr(i)));
  end;

  Edits[EDIT_TIME_TOTAL] := _TEdit(Forms[FORM_SETTINGS_PLAYER]);
  with Edits[EDIT_TIME_TOTAL] do
  begin
    Parent := ComboBoxes[COMBOBOX_LAMPSKILL].Parent;
    Top    := ComboBoxes[COMBOBOX_LAMPSKILL].Top + ComboBoxes[COMBOBOX_LAMPSKILL].Height + _SPACING;
    Left   := ComboBoxes[COMBOBOX_LAMPSKILL].Left;
    Width  := ComboBoxes[COMBOBOX_LAMPSKILL].Width;
    Name   := 'TotalTime';
    Hint   := 'The total time for this player to run in minutes (leave to run forever)'
  end;

  Edits[EDIT_LOADS_TOTAL] := _TEdit(Forms[FORM_SETTINGS_PLAYER]);
  with Edits[EDIT_LOADS_TOTAL] do
  begin
    Parent := Edits[EDIT_TIME_TOTAL].Parent;
    Top    := Edits[EDIT_TIME_TOTAL].Top + Edits[EDIT_TIME_TOTAL].Height + _SPACING;
    Left   := Edits[EDIT_TIME_TOTAL].Left;
    Width  := Edits[EDIT_TIME_TOTAL].Width;
    Name   := 'TotalLoads';
    Hint   := 'The total loads for this player to run (leave to run forever)'
  end;

  Edits[EDIT_TIME_BREAK] := _TEdit(Forms[FORM_SETTINGS_PLAYER]);
  with Edits[EDIT_TIME_BREAK] do
  begin
    Parent := Edits[EDIT_LOADS_TOTAL].Parent;
    Top    := Edits[EDIT_LOADS_TOTAL].Top + Edits[EDIT_LOADS_TOTAL].Height + _SPACING;
    Left   := Edits[EDIT_LOADS_TOTAL].Left;
    Width  := Edits[EDIT_LOADS_TOTAL].Width;
    Name   := 'BreakAfter';
    Hint   := 'Break after how long? (minutes).  Leave if not taking breaks.'
  end;

  Edits[EDIT_LOADS_BREAK] := _TEdit(Forms[FORM_SETTINGS_PLAYER]);
  with Edits[EDIT_LOADS_BREAK] do
  begin
    Parent := Edits[EDIT_TIME_BREAK].Parent;
    Top    := Edits[EDIT_TIME_BREAK].Top + Edits[EDIT_TIME_BREAK].Height + _SPACING;
    Left   := Edits[EDIT_TIME_BREAK].Left;
    Width  := Edits[EDIT_TIME_BREAK].Width;
    Name   := 'BreakLoads';
    Hint   := 'Loads to do before breaking (single player) or switching ' +
              'players (multiplayer).  Leave if you don''t want to break.'
  end;

  Edits[EDIT_BREAK_FOR] := _TEdit(Forms[FORM_SETTINGS_PLAYER]);
  with Edits[EDIT_BREAK_FOR] do
  begin
    Parent := Edits[EDIT_LOADS_BREAK].Parent;
    Top    := Edits[EDIT_LOADS_BREAK].Top + Edits[EDIT_LOADS_BREAK].Height + _SPACING;
    Left   := Edits[EDIT_LOADS_BREAK].Left;
    Width  := Edits[EDIT_TIME_TOTAL].Width;
    Name   := 'BreakFor';
    Hint   := 'How long to break for (single player)'
  end;

  Labels[LABEL_REWARDS] := TLabel.Create(Forms[FORM_SETTINGS_PLAYER]);
  with Labels[LABEL_REWARDS] do
  begin
    Parent  := Labels[LABEL_LAMPSKILL].Parent;
    Top     := Labels[LABEL_LAMPSKILL].Top;
    Left    := Forms[FORM_SETTINGS_PLAYER].Width / 2 + _SPACING;
    Caption := 'Reward box rewards';
  end;

  CheckLists[CHECKLIST_REWARDS] := TCheckListBox.Create(Forms[FORM_SETTINGS_PLAYER]);
  with CheckLists[CHECKLIST_REWARDS] do
  begin
    Parent   := Labels[LABEL_REWARDS].Parent;
    Left     := Labels[LABEL_REWARDS].Left
    Top      := Labels[LABEL_REWARDS].Top + Labels[LABEL_REWARDS].Height;
    Width    := 125;
    Height   := Edits[EDIT_BREAK_FOR].Top + Edits[EDIT_BREAK_FOR].Height - Top + 2;
    Hint     := 'Check off the rewards you want from random events (XP is default)';
    ShowHint := true;

    s := ['XP Lamp', 'Costume', 'Coins', 'Gem', 'Clay Ore', 'Coal Ore', 'Mystery Box', 'Emote'];
    for i := 0 to high(s) do
      Items.Add(s[i]);
  end;

  Buttons[BUTTON_PLAYER_SAVE] := _TButton(Forms[FORM_SETTINGS_PLAYER]);
  with Buttons[BUTTON_PLAYER_SAVE] do
  begin
    Parent  := Edits[EDIT_TIME_TOTAL].Parent;
    Caption := 'Save';
    Hint    := 'Save the player''s settings';
    Width   := 100;
    Top     := Edits[EDIT_BREAK_FOR].Top + Edits[EDIT_BREAK_FOR].Height + (_SPACING * 2);
    Left    := Forms[FORM_SETTINGS_PLAYER].Width / 2 - (Width + (_SPACING / 2));
  end;

  Buttons[BUTTON_PLAYER_CANCEL] := _TButton(Forms[FORM_SETTINGS_PLAYER]);
  with Buttons[BUTTON_PLAYER_CANCEL] do
  begin
    Parent  := Edits[EDIT_TIME_TOTAL].Parent;
    Caption := 'Cancel';
    Hint    := 'Cancel without saving player''s settings';
    Width   := Buttons[BUTTON_PLAYER_SAVE].Width;
    Top     := Buttons[BUTTON_PLAYER_SAVE].Top;
    Left    := Forms[FORM_SETTINGS_PLAYER].Width / 2 + (_SPACING / 2);
  end;
end;

procedure initPlayerSetup();
begin
  Lists[LIST_PLAYERS] := _TListBox(Panels[PANEL_PLAYER]);
  with Lists[LIST_PLAYERS] do
  begin
    Parent := Panels[PANEL_PLAYER];
    Top    := 10 + _SPACING;
    Width  := 150;
    Left   := _SPACING;
    Hint   := 'A list of all your players.  Double click to open advanded settings.';
    Height := Panels[PANEL_PLAYER].Height - Lists[LIST_PLAYERS].Top - 50;
  end;

  Buttons[BUTTON_ADVANCED_PLAYER] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_ADVANCED_PLAYER] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Width   := Lists[LIST_PLAYERS].Width;
    Top     := Lists[LIST_PLAYERS].Top + Lists[LIST_PLAYERS].Height + _SPACING;
    Left    := Lists[LIST_PLAYERS].Left;
    Height  := 30;
    Hint    := 'Opens an advanced settings window for the selected player';
    Caption := 'Advanced Player Settings';
    Enabled := false;
  end;

  Labels[LABEL_PLAYERS] := TLabel.Create(Forms[FORM_MAIN]);
  with Labels[LABEL_PLAYERS] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Caption := 'Player List';
    Top     := Lists[LIST_PLAYERS].Top - Labels[LABEL_PLAYERS].Height;
    Left    := Lists[LIST_PLAYERS].Left;
  end;

  Edits[EDIT_USERNAME] := _TEdit(Forms[FORM_MAIN]);
  with Edits[EDIT_USERNAME] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Top    := Lists[LIST_PLAYERS].Top;
    Left   := Lists[LIST_PLAYERS].Left + Lists[LIST_PLAYERS].Width + _SPACING;
    Name   := 'Username';
    Hint   := 'Your Runescape login name or email';
  end;

  Edits[EDIT_PASSWORD] := _TEdit(Forms[FORM_MAIN]);
  with Edits[EDIT_PASSWORD] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Top    := Edits[EDIT_USERNAME].Top + Height + _SPACING;
    Left   := Edits[EDIT_USERNAME].Left;
    Name   := 'Password';
    Hint   := 'Your Runescape password';
    Tag    := $01;
  end;

  Edits[EDIT_PIN] := _TEdit(Forms[FORM_MAIN]);
  with Edits[EDIT_PIN] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Top    := Edits[EDIT_PASSWORD].Top + Height + _SPACING;
    Left   := Edits[EDIT_USERNAME].Left;
    Name   := 'Pin';
    Hint   := 'Your Runescape bank pin (leave blank if you don''t have one)';
    Tag    := $01;
    MaxLength := 4;
  end;

  CheckBoxes[CHECKBOX_ACTIVE] := _TCheckBox(Forms[FORM_MAIN]);
  with CheckBoxes[CHECKBOX_ACTIVE] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Left   := Edits[EDIT_USERNAME].Left + 1;
    Top    := Edits[EDIT_PIN].Top + Edits[EDIT_PIN].Height + _SPACING;
    Hint   := 'Do you want to use this player?';
  end;

  CheckBoxes[CHECKBOX_MEMBER] := _TCheckBox(Forms[FORM_MAIN]);
  with CheckBoxes[CHECKBOX_MEMBER] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Left   := CheckBoxes[CHECKBOX_ACTIVE].Left;
    Top    := CheckBoxes[CHECKBOX_ACTIVE].Top + CheckBoxes[CHECKBOX_ACTIVE].Height + _SPACING;
    Hint   := 'Is this player a Runescape member?';
  end;

  Labels[LABEL_ACTIVE] := TLabel.Create(Forms[FORM_MAIN]);
  with Labels[LABEL_ACTIVE] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Caption := 'Active';
    Top     := CheckBoxes[CHECKBOX_ACTIVE].Top  + (Height / 6);
    Left    := CheckBoxes[CHECKBOX_ACTIVE].Left + CheckBoxes[CHECKBOX_ACTIVE].Width + _SPACING;
  end;

  Labels[LABEL_MEMBER] := TLabel.Create(Forms[FORM_MAIN]);
  with Labels[LABEL_MEMBER] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Caption := 'Member';
    Top     := CheckBoxes[CHECKBOX_MEMBER].Top  + (Height / 6);
    Left    := Labels[LABEL_ACTIVE].Left;
  end;

  Buttons[BUTTON_PLAYER_ADD] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_PLAYER_ADD] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Width   := Edits[EDIT_USERNAME].Width / 2 - (_SPACING / 2);
    Top     := CheckBoxes[CHECKBOX_MEMBER].Top + CheckBoxes[CHECKBOX_MEMBER].Height + _SPACING;
    Left    := Edits[EDIT_USERNAME].Left;
    Hint    := 'Adds the player with the current settings to the Player List';
    Caption := '+';
    Font.Size := 10;
  end;

  Buttons[BUTTON_PLAYER_DELETE] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_PLAYER_DELETE] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Width   := Buttons[BUTTON_PLAYER_ADD].Width;
    Top     := Buttons[BUTTON_PLAYER_ADD].Top;
    Left    := Buttons[BUTTON_PLAYER_ADD].Left + Buttons[BUTTON_PLAYER_ADD].Width + _SPACING;
    Hint    := 'Removes the selected player from the Player List';
    Caption := '-';
    Font.Size := Buttons[BUTTON_PLAYER_ADD].Font.Size;
  end;

  Lists[LIST_PLAYER_SCRIPTS] := _TListBox(Forms[FORM_MAIN]);
  with Lists[LIST_PLAYER_SCRIPTS] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Top    := Lists[LIST_PLAYERS].Top;
    Width  := Lists[LIST_PLAYERS].Width;
    Height := Buttons[BUTTON_PLAYER_DELETE].Top + Buttons[BUTTON_PLAYER_DELETE].Height - Top;
    Left   := Edits[EDIT_USERNAME].Left + Edits[EDIT_USERNAME].Width + (_SPACING * 2);
    Hint   := 'A list of all the selected player''s scripts. Double click to open advanced settings.';
  end;

  Buttons[BUTTON_SCRIPT_ADD] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_SCRIPT_ADD] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Top     := Lists[LIST_PLAYER_SCRIPTS].Top;
    Width   := 100;
    Left    := Lists[LIST_PLAYER_SCRIPTS].Left + Lists[LIST_PLAYER_SCRIPTS].Width + _SPACING;
    Hint    := 'Click to Add a script for the current player';
    Caption := 'Add Script';
    Enabled := false;
  end;

  Buttons[BUTTON_SCRIPT_DELETE] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_SCRIPT_DELETE] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Top     := Buttons[BUTTON_SCRIPT_ADD].Top + Height + _SPACING;
    Width   := Buttons[BUTTON_SCRIPT_ADD].Width;
    Left    := Buttons[BUTTON_SCRIPT_ADD].Left;
    Hint    := 'Click to remove the selected script from the list';
    Caption := 'Delete Script';
    Enabled := false;
  end;

  Buttons[BUTTON_SCRIPT_SETTINGS] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_SCRIPT_SETTINGS] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Top     := Buttons[BUTTON_SCRIPT_DELETE].Top + Height + _SPACING;
    Width   := Buttons[BUTTON_SCRIPT_DELETE].Width;
    Left    := Buttons[BUTTON_SCRIPT_DELETE].Left;
    Hint    := 'Click or double click script in list to customize script settings';
    Caption := 'Script Settings';
    Enabled := false;
  end;

  Labels[LABEL_SCRIPTS] := TLabel.Create(Forms[FORM_MAIN]);
  with Labels[LABEL_SCRIPTS] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Caption := 'Player''s Scripts';
    Top     := Lists[LIST_PLAYER_SCRIPTS].Top - Labels[LABEL_SCRIPTS].Height;
    Left    := Lists[LIST_PLAYER_SCRIPTS].Left;
  end;

  CheckBoxes[CHECKBOX_APPLY_ALL] := _TCheckBox(Forms[FORM_MAIN]);
  with CheckBoxes[CHECKBOX_APPLY_ALL] do
  begin
    Parent := Lists[LIST_PLAYERS].Parent;
    Left   := Buttons[BUTTON_SCRIPT_SETTINGS].Left + 1;
    Top    := Buttons[BUTTON_SCRIPT_SETTINGS].Top + Buttons[BUTTON_SCRIPT_SETTINGS].Height + _SPACING;;
    Hint   := 'Apply the current settings to all players';
  end;

  Labels[LABEL_APPLY_ALL] := TLabel.Create(Forms[FORM_MAIN]);
  with Labels[LABEL_APPLY_ALL] do
  begin
    Parent  := Lists[LIST_PLAYERS].Parent;
    Caption := 'Apply to All';
    Top     := CheckBoxes[CHECKBOX_APPLY_ALL].Top + (Height / 6);
    Left    := CheckBoxes[CHECKBOX_APPLY_ALL].Left + CheckBoxes[CHECKBOX_APPLY_ALL].Width + _SPACING;
  end;

  initPlayerAdvanced();
end;

procedure formInit();
var
  i: integer;
begin
  Forms[FORM_MAIN] := TForm.Create(nil);
  with Forms[FORM_MAIN] do
  begin
    Width   := 559;
    Height  := 304;
    Caption := 'MSI Phoenix ~ Multiple Script Integration @ SRL-Forums';
    OnPaint := @_Paint;
  end;

  initMainMenu();
  initScriptsList();

  OpenDialog := TOpenDialog.Create(Forms[FORM_MAIN]);
  OpenDialog.Title := ' Choose a player file to open';

  SaveDialog := TSaveDialog.Create(Forms[FORM_MAIN]);
  SaveDialog.Title := ' Save your player file';
  SaveDialog.DefaultExt := '.txt';

  Buttons[BUTTON_SETTINGS] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_SETTINGS] do
  begin
    Parent  := Forms[FORM_MAIN];
    Width   := 150;
    Top     := 10;
    Left    := 10;
    Hint    := 'Takes you to the script settings page';
    Caption := '<< Global Settings     ';
  end;

  Labels[LABEL_TITLE] := TLabel.Create(Forms[FORM_MAIN]);
  with Labels[LABEL_TITLE] do
  begin
    Parent      := Forms[FORM_MAIN];
    Top         := 8;
    Left        := 220;
    Font.Height := 25;
    Font.Style  := [fsItalic];
  end;

  Buttons[BUTTON_PLAYER] := _TButton(Forms[FORM_MAIN]);
  with Buttons[BUTTON_PLAYER] do
  begin
    Parent  := Forms[FORM_MAIN];
    Width   := Buttons[BUTTON_SETTINGS].Width;
    Top     := Buttons[BUTTON_SETTINGS].Top;
    Left    := Parent.Width - (Width + 10);
    Hint    := 'Takes you to the player setup page';
    Caption := '     Player Setup >>';
  end;

  for i := low(Panels) to high(Panels) do
  begin
    Panels[i] := TPanel.Create(Forms[FORM_MAIN]);
    with Panels[i] do
    begin
      Parent     := Forms[FORM_MAIN];
      Left       := 0;
      Top        := 50;
      Height     := Forms[FORM_MAIN].Height - Top - _MENUHEIGHT;
      Width      := Forms[FORM_MAIN].Width;
      BevelWidth := 0;
      Visible    := false;
      Color      := COLOR_BACKGROUND;
    end;
  end;

  with Panels[PANEL_MAIN] do
  begin
    Visible := true;
    Top     := 0;
    Height  := Parent.Height;
  end;

  initIntro();
  initGlobalSettings();
  initScriptsSettings();
  initPlayerSetup();

  // Set the common attributes for all Forms/components
  for i := low(Forms) to high(Forms) do
    with Forms[i] do
    begin
      BorderStyle := bsSingle;
      Position    := poScreenCenter;
      Color       := COLOR_BACKGROUND;
    end;

  for i := low(Lists) to high(Lists) do
    with Lists[i] do
    begin
      ShowHint := true;
    end;

  for i := low(Labels) to high(Labels) do
    with Labels[i] do
    begin
      Font.Color := COLOR_FONT;
    end;

  Forms[FORM_MAIN].ShowModal;
end;

procedure formSafeCall(proc: string);
var
  v: TVariantArray;
begin
  setLength(v, 0);
  threadSafeCall(proc, v);
end;

procedure formFree();
begin
  Forms[FORM_MAIN].free();
end;

{$IFDEF FORM_TESTING}
begin
  ClearDebug();
  MSI_Setup();
  MSI_FreeAllItems();

  try
    try
      formSafeCall('formInit');
    finally
      formSafeCall('formFree');
    end;
  except
    writeln(ExceptionToString(ExceptionType, ExceptionParam));
  end;
end.
{$ENDIF}

