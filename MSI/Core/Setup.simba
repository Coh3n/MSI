(*
Setup
=====

The Setup file includes all the files that MSI uses throughout the include, plus
the necessary setup procedures called when the script starts.

The source for can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Setup.simba>`_.

*)

//SRL Includes
{$i srl/srl.scar}

{$IFDEF SMART}
  {$IFDEF MSI_REFLECTION}
    {$i reflection/reflection.simba}
  {$ENDIF}
  {$i srl/srl/misc/paintsmart.scar}
{$ELSE}
  {$IFNDEF SPS}
    {$DEFINE SPS}
  {$ENDIF}
{$ENDIF}

{$IFDEF SPS}
  {$i sps/sps.simba}
{$ENDIF}

{$i srl/srl/misc/Reports.scar}
{$i srl/srl/misc/Stats.simba}

{$i srl/srl/skill/magic.scar}

{$IFDEF SRL_REMOTE}
  {$i srl/srl/misc/remote.simba}
{$ENDIF}

//MSI Script
{$i MSI/MSI/Core/Globals.simba}
{$i MSI/MSI/Core/Debug.simba}
{$i MSI/MSI/Core/Extras.simba}
{$i MSI/MSI/Core/Manipulation.simba}
{$i MSI/MSI/Core/Track.simba}
{$i MSI/MSI/Core/Antiban.simba}
{$i MSI/MSI/Core/Animating.simba}
{$i MSI/MSI/Core/Objects.simba}
{$i MSI/MSI/Core/Items.simba}
{$i MSI/MSI/Core/Obstacles.simba}
{$i MSI/MSI/Skills/Magic.simba} //Used in Walking.simba
{$i MSI/MSI/Core/Walking.simba}
{$i MSI/MSI/Core/Materials.simba}
{$i MSI/MSI/Core/Locations.simba}

{$i MSI/MSI/Skills/Common.simba}
{$i MSI/MSI/Core/Banking.simba}

//MSI Skill Files
{$i MSI/MSI/Skills/Woodcutting.simba}
{$i MSI/MSI/Skills/Mining.simba}
{$i MSI/MSI/Skills/Fishing.simba}
{$i MSI/MSI/Skills/Cooking.simba}
{$i MSI/MSI/Skills/Money_Making.simba}

{$i MSI/MSI/Core/Reports.simba}
{$i MSI/MSI/Core/Scripts.simba}

//Extras
{$IFDEF EXTRA_EXAMPLE}
  {$i MSI/MSI/Extras/Example.simba}
{$ENDIF}

{$IFDEF EXTRA_CHARACTER_STATS}
  {$i MSI/MSI/Extras/CharacterStats.simba}
{$ENDIF}

//MSI Skill Loops, AI and Mainloop
{$i MSI/MSI/Core/MainLoop.simba}
{$i MSI/MSI/Form/Form.simba}

(*
MSI_Setup
~~~~~~~~~

.. code-block:: pascal

  procedure MSI_Setup();

Sets up MSI by loading all the global arrays used throughout the include.

.. note::

  | Author: Coh3n
  | Last Updated: 27 February 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_Setup();
*)
procedure MSI_Setup();
var
  Timer: integer;
begin
  MarkTime(Timer);

  MSI_LoadAllLocations;
  MSI_LoadAllScripts;
  MSI_LoadAllItems;
  MSI_LoadAllSpells;
  MSI_LoadAllExtras;
  Track_LoadNames;

  Writeln('Setting up MSI took '+IntToStr(TimeFromMark(Timer))+' ms.');
end;

(*
MSI_CheckHooks
~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_CheckHooks();

This procedure sets the global variable MSI_HookBroken that determines which
of the hooks MSI uses are broken.  This usually only makes a difference shortly
after an RS update and before all the hooks can be updated.

.. note::

  | Author: Coh3n
  | Last Updated: 28 July 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_CheckHooks();
*)
procedure MSI_CheckHooks();
{$IFDEF REFLECTION}
var
  i: integer;
{$ENDIF}
begin
  {$IFDEF REFLECTION}
  MSI_AddHeader('MSI_CheckHooks');

  // try to get updated hooks
  //r_UpdateKill := false;
  R_ContinueIfOutdated := True;
  setupReflection();

  // to check some hooks, player needs to be logged in
  if (not loggedIn) then
  begin
    MSI_Debug('Logging in...');
    loginPlayer();
  end;

  // check to see if the hooks MSI uses are updated
  MSI_HookBroken[HOOK_WALKING] := (smartGetFieldObject(0, hook_static_MyPlayer) <= 0);
  MSI_HookBroken[HOOK_LEVEL_SKILL] := (smartGetFieldArrayInt(0, hook_static_SkillLevels, 0) <= 0);

  for i := 0 to high(MSI_HookBroken) do
    if (MSI_HookBroken[i]) then
    begin
      if (not MSI_HookBroken[HOOK_RANDOMS]) then
      begin
        MSI_HookBroken[HOOK_RANDOMS] := true;
        MSI_Debug('Hook broken: randoms - using color solvers');
      end;

      case i of
        HOOK_WALKING: MSI_Debug('Hook broken: walking');
        HOOK_LEVEL_SKILL: MSI_Debug('Hook broken: skill level');
      end;
    end;

  MSI_CloseHeader('MSI_CheckHooks: Done');
  {$ENDIF}
end;

(*
MSI_RefNotDefined
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_RefNotDefined();

Called in MSI_WalkingDefines.  All it does is warn the user on what to do if
Reflection isn't or is defined.

.. note::

  | Author: Coh3n
  | Last Updated: 28 July 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_RefNotDefined();
*)
procedure MSI_RefNotDefined();
begin
  {$IFNDEF MSI_REFLECTION}
  showMessage('Please define reflection at the top of RunMe.simba');
  terminateScript();
  {$ELSE}
  if (MSI_HookBroken[HOOK_WALKING]) then
  begin
    showMessage('Walking hook broken, please use SPS or wait for an update ' +
      'from reflection');
    terminateScript();
  end else
    MSI_Debug('Using reflection');
  {$ENDIF}
end;

(*
MSI_SPSNotDefined
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_SPSNotDefined();

Called in MSI_WalkingDefines.  All it does is warn the user on what to do if
SPS isn't or is defined.

.. note::

  | Author: Coh3n
  | Last Updated: 28 July 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_SPSNotDefined();
*)
procedure MSI_SPSNotDefined();
begin
  {$IFNDEF SPS}
  if (MSI_HookBroken[HOOK_WALKING]) then
  begin
    showMessage('Walking hook broken, please define SPS at the top of RunMe.simba');
    terminateScript();
  end;

  case messageDlg('WARNING',
        'Color walking is selected, and SPS isn''t defined. Please click No and ' +
        'define SPS at the top of RunMe.simba or Yes to use reflection walking.',
        mtConfirmation, [mbYes, mbNo]) of
    mrYes: MSI_RefNotDefined();
    mrNo: terminateScript();
  end;
  {$ELSE}
  case messageDlg('WARNING',
        'MSI doesn''t have death walking support without reflection.  This means ' +
        'you have to start your player at the script''s location rather than ' +
        'anywhere in Runescape.  Click Yes to continue or No to use reflection.',
        mtConfirmation, [mbYes, mbNo]) of
    mrYes:
      begin
        MSI_Debug('Using SPS without death walking support');
        MSI_HookBroken[HOOK_WALKING] := true;
      end;

    mrNo: MSI_RefNotDefined();
  end;
  {$ENDIF}
end;

(*
MSI_WalkingDefines
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_WalkingDefines();

Warns the user of the possible issues depending on the walking method they
chose.  Sets MSI_HookBroken[HOOK_WALKING] true or false depending on the final
walking method chosen.

.. note::

  | Author: Coh3n
  | Last Updated: 28 July 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_CheckDefines();
*)
procedure MSI_WalkingDefines();
var
  i, j: integer;
  areWalking: boolean;
begin
  MSI_CheckHooks();

  // goes through player's scripts to see if walking is required
  for i := 0 to high(MSI_Players) do
    with MSI_Players[i] do
    begin
      for j := 0 to high(scripts) do
        if (length(MSI_Scripts[scripts[j].name].pathInfo.reflection) > 0) then
        begin
          areWalking := true;
          break;
        end;

      if (areWalking) then
        break;
    end;

  if (not areWalking) then
  begin
    MSI_SubDebug('MSI_WalkingDefines: Walking not required');
    exit;
  end;

  if (lowercase(MSI_Settings[SETUP_WALKING]) = 'color') then
    MSI_SPSNotDefined();

  if (lowercase(MSI_Settings[SETUP_WALKING]) = 'reflection') then
  begin
    if (MSI_HookBroken[HOOK_WALKING]) then
    begin
      MSI_SPSNotDefined();
      exit;
    end;

    {$IFNDEF MSI_REFLECTION}
    case messageDlg('WARNING',
          'Reflection walking is selected, but isn''t defined. Please click No and ' +
          'define reflection at the top of RunMe.simba or click Yes to use color ' +
          'walking.',
          mtConfirmation, [mbYes, mbNo]) of
      mrYes: MSI_SPSNotDefined();
      mrNo: terminateScript();
    end;
    {$ENDIF}
  end;
end;

