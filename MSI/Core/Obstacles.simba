(*
Obstacles
=========

The Obstacles file includes all routines that are used to solve obstacles such
as climbing a ladder or climbing over a wall.

The source for can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Obstacles.simba>`_.

*)

(*
MSI_GetObstacle
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_GetObstacle(obs: integer): TObstacle;

Returns a TObstacle record for the obstacle specified by 'obs'; 'obs' is a
constant that can be found in
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Globals.simba>`_ with the
prefix "OBS_".

.. note::

  | Author: The MSI Team
  | Last Updated: 23 July 2011 by Coh3n

Example:

.. code-block:: pascal

  var
    obs: TObstacle;
  begin
    obs := MSI_GetObstacle(OBS_LADDER_DOWN_MINE_GUILD);
    writeln('Loaded obstacle: '+obs.name);
  end;
*)
function MSI_GetObstacle(obs: integer): TObstacle;
begin
  case obs of
    OBS_LADDER_MG_DOWN:
      with result do
      begin
        Name     := 'OBS_LADDER_MG_DOWN';
        ObjConst := LADDER_MG_DOWN;
        ObjMir   := LADDER_MG_UP;
        ObjMirArea := intToBox(MSCX - 85, MSCY - 85, MSCX + 85, MSCY + 85);
        Camera   := ['n', true];

        // West, South, East, North
        EndTiles   := [Point(3017, 9739), Point(3019, 9737),
                       Point(3021, 9739), Point(3019, 9741)];
      end;

    OBS_LADDER_MG_UP:
      with result do
      begin
        Name     := 'OBS_LADDER_MG_UP';
        ObjConst := LADDER_MG_UP;
        ObjMir   := LADDER_MG_DOWN;
        ObjMirArea := intToBox(MSCX - 85, MSCY - 85, MSCX + 85, MSCY + 85);
        Camera   := ['n', true];

        // West, South, East, North
        EndTiles   := [Point(3017, 3339), Point(3019, 3337),
                       Point(3021, 3339), Point(3019, 3341)];
      end;

    OBS_WALL_FW:
      with result do
      begin
        Name       := 'OBS_WALL_FW';
        ObjConst   := WALL_FW;
        ObjMir     := WALL_FW;
        ObjMirArea := intToBox(MSCX, MSY1, MSX2, MSY2); // Right half of MS;
        Camera     := ['w', false];
        EndTiles   := [Point(2940, 3355)];
      end;

    OBS_DOOR_CG_IN:
      with result do
      begin
        Name       := 'OBS_DOOR_CG_IN';
        MirText    := ['elcome', 'uild', 'aster', 'raft'];
        ObjConst   := DOOR_NORMAL;
        ObjMir     := DOOR_NORMAL;
        ObjMirArea := intToBox(MSCX - 100, MSCY - 100, MSCX + 100, MSCY - 20);
        Camera     := ['n', true];
        EndTiles   := [Point(2933, 3288)];
      end;

    OBS_DOOR_CG_OUT:
      with result do
      begin
        Name       := 'OBS_DOOR_CG_OUT';
        ObjConst   := DOOR_NORMAL;
        ObjMir     := DOOR_NORMAL;
        ObjMirArea := intToBox(MSCX - 100, MSCY, MSCX + 100, MSCY + 100);
        Camera     := ['n', true];
        EndTiles   := [Point(2933, 3289)];
      end;

  end;

  result.constant := obs;
end;

(*
MSI_FindMirrorText
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FindMirrorText(obs: TObstacle): boolean;

Returns true if the obstacle's (obs) mirror text is found in the RS chat box.

.. note::

  | Author: Coh3n
  | Last Updated: 01 August 2011 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_FindMirrorText(obs)) then
    MSI_Debug('Found mirror text: ' + obs.mirText);
*)
function MSI_FindMirrorText(obs: TObstacle): boolean;
var
  i, x, y: integer;
begin
  if (length(obs.mirText) <= 0) then
  begin
    MSI_SubDebug('No text for obstacle: ' + obs.name);
    exit;
  end;

  for i := 0 to high(obs.mirText) do
    if (findText(x, y, obs.mirText[i], 'CharsNPC', MCX1, MCY1, MCX2, MCY2)) then
    begin
      result := true;
      MSI_SubDebug('Found mirror text: ' + obs.mirText[i]);
      break;
    end;
end;

(*
MSI_FindMirrorObject
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FindMirrorObject(obs: TObstacle): boolean;

Returns true if the obstacle's (obs) mirror object is found in the record's
search area.  Will move the mouse and check for uptext, just to be sure.  Will
also draw the search area in blue on the main screen.

.. note::

  | Author: Coh3n
  | Last Updated: 01 August 2011 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_FindMirrorObject(obs)) then
    MSI_Debug('Found mirror object: ' + obs.name);
*)
function MSI_FindMirrorObject(obs: TObstacle): boolean;
var
  mirObj: TMSObject;
begin
  mirObj := MSI_GetObject(obs.objMir);
  mirObj.searchArea := obs.objMirArea;

  {$IFDEF SMART}
  if (MSI_Settings[SETUP_DEBUG_SMART]) then
    SMART_DrawBoxEx(false, mirObj.searchArea, clBlue);
  {$ENDIF}

  if (MSI_FindObject(mirObj, moMove)) then
  begin
    MSI_SubDebug('Found mirror object: ' + mirObj.name);
    result := true;
  end;
end;

(*
MSI_OnMirrorTile
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_OnMirrorTile(obs: TObstacle): boolean;

Returns true if the player's current tile is the same as one of the obstacle's
(obs) ending tiles.

.. note::

  | Author: Coh3n
  | Last Updated: 23 July 2011 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_OnMirrorTile(obs)) then
    MSI_Debug('Player not on ending tiles');
*)
function MSI_OnMirrorTile(obs: TObstacle): boolean;
{$IFDEF REFLECTION}
var
  i, h: integer;
  mPos: TPoint;
{$ENDIF}
begin
  if (not loggedIn) then
    exit;

  result := false;

  {$IFDEF REFLECTION}
  if (not MSI_HookBroken[HOOK_WALKING]) then
  begin
    mPos := r_getMyPos();
    h := high(obs.endTiles);

    // loop through end tiles comparing to player's current tile
    for i := 0 to h do
      if (mPos = obs.endTiles[i]) then
      begin
        MSI_SubDebug('Player is on end tile');
        result := true;
        break;
      end;
  end;
  {$ENDIF}
end;

(*
MSI_WaitForMirror
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WaitForMirror(obs: TObstacle): boolean;

Returns true when an obstacles 'mirror object' has appeared. For example, if
we're climbing a ladder, the mirror obstacle would be the ladder climbing down.
If reflection is enabled, it will check to see if the player is on the end tile,
and return true if they are.

.. note::

  | Author: Sir R. Magician & Coh3n
  | Last Updated: 01 August 2011 by Coh3n

Example:

.. code-block:: pascal

  var
    obs: TObstacle;
  begin
    obs := MSI_GetObstacle(LADDER_MG_DOWN);

    // clickObstacle isn't a real function, just an example
    if (clickObstacle(obs)) then
      result := MSI_WaitForMirror(obs);
  end;
*)
function MSI_WaitForMirror(obs: TObstacle): boolean;
var
  t: integer;
  mirFound: boolean;
begin
  if (not loggedIn) then
    exit;

  t := (getSystemTime + 30000);

  repeat
    mirFound := MSI_FindMirrorText(obs);
    if (not mirFound) then
      mirFound := MSI_FindMirrorObject(obs);

    if (mirFound) then
    begin
      {$IFDEF REFLECTION}
      if (not MSI_OnMirrorTile(obs)) then
        continue;
      {$ENDIF}

      result := true;
    end;

    if (not result) then
      if ((t - getSystemTime) > 10000) then // reset after 10 seconds
        MSI_NotBoxes := [];

    wait(randomRange(250, 500));
  until(result or (getSystemTime > t));
end;

(*
MSI_SolveObstacle
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SolveObstacle(obs: TObstacle): boolean;

Returns true if the obstacle 'obs' is solved. Uses MSI_FindObject to find and
click the obstacle, then calls MSI_WaitForMirror to determine when the obstacle
has been passed.

.. note::

  | Author: Coh3n
  | Last Updated: 01 August 2011 by Coh3n

Example:

.. code-block:: pascal

  var
    obs: TObstacle;
  begin
    obs := MSI_GetObstacle(LADDER_MG_DOWN);
    result := MSI_SolveObstacle(obs);
  end;
*)
function MSI_SolveObstacle(obs: TObstacle): boolean;
var
  {$IFDEF REFLECTION}
  i: integer;
  {$ENDIF}
  t: integer;
  obsObj: TMSObject;
begin
  if (not loggedIn) then
    exit;

  MSI_AddHeader('MSI_SolveObstacle');
  obsObj := MSI_GetObject(obs.objConst);

  if ((varType(obs.camera[0]) = varString) and (obs.camera[0] = 'n')) then
    clickNorth(obs.camera[1])
  else begin
    makeCompass(obs.camera[0]);
    setAngle(obs.camera[1]);
  end;

  while ((not result) and (t < 5)) do
  begin
    inc(t);

    if (MSI_FindObject(obsObj, moLeft)) then
    begin
      wait(randomRange(1500, 2000));
      result := MSI_WaitForMirror(obs);
    end else begin
      // click the obstacle's tile if it's not found
      {$IFDEF REFLECTION}
      if (not MSI_HookBroken[HOOK_WALKING]) then
        for i := 0 to high(obs.endTiles) do
          if (r_walkToTile(obs.endTiles[i], 0, 0)) then
          begin
            MSI_Debug('Clicked obstacle''s tile');
            wait(randomRange(500, 1000));
            break;
          end;
      {$ENDIF}

      MSI_Debug('Setting obstacle to right click only');
      obsObj.rightClickOnly := true; // in case uptext is failing
      MSI_NotBoxes := [];
    end;
  end;

  MSI_CloseHeader('MSI_SolveObstacle: ' + boolToStr(result));
end;

