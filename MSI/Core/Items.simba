(*
Items
=====

The Items file stores any routines that have anything to do with interacting
with items in Runescape.

The source for Items.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Items.simba>`_.

*)

{$i ItemBase.simba}

(*
MSI_GetItemExp
~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_GetItemExp(Skill: Integer; Items: TIntegerArray): TExtendedArray;

Returns an array of the experience for certain items depening on the skill.
For example, for Woodcutting, getting a Normal Log may be 25 experience where
burning a Normal Log for Firemaking may be 30 experience.

.. note::

  | Author: The MSI Team
  | Last Updated: 03 July 2010 by Coh3n

Example:

.. code-block:: pascal

  exps := MSI_GetItemExp(SKILL_WOODCUTTING, [LOGS_NORMAL, LOGS_OAK]);
*)
function MSI_GetItemExp(Skill: Integer; Items: TIntegerArray): TExtendedArray;
var
  i: integer;
  e: extended;
begin
  setLength(result, length(items));

  for i := 0 to High(Items) do
  begin
    e := 0;
    case Skill of
      SKILL_WOODCUTTING:
        case Items[i] of
          LOGS_NORMAL : e := 25.0;
          LOGS_OAK    : e := 37.5;
          LOGS_WILLOW : e := 67.5;
          LOGS_MAPLE  : e := 100.0;
          LOGS_YEW    : e := 175.0;
          LOGS_MAGIC  : e := 250.0;

          else
            MSI_SubDebug('MSI_GetItemExperiences: Invalid item for woodcutting ' + IntToStr(Items[i]));
        end;

      SKILL_MINING:
        case Items[i] of
          ORE_CLAY      : e := 5.0;
          ORE_TIN       : e := 17.5;
          ORE_COPPER    : e := 17.5;
          ORE_IRON      : e := 35.0;
          ORE_SILVER    : e := 40.0;
          ORE_COAL      : e := 50.0;
          ORE_GOLD      : e := 65.0;
          ORE_MITHRIL   : e := 80.0;
          ORE_ADAMANTITE: e := 95.0;
          ORE_RUNITE    : e := 125.0;

          else
             MSI_Debug('MSI_GetItemExperiences: Invalid item for mining: ' + IntToStr(Items[i]));
        end;

      SKILL_FISHING:
        case Items[i] of
          FISH_RAW_SHRIMP    : e := 10.0;
          FISH_RAW_CRAYFISH  : e := 10.0;
          FISH_RAW_SARDINE   : e := 20.0;
          FISH_RAW_HERRING   : e := 30.0;
          FISH_RAW_ANCHOVIE  : e := 40.0;
          FISH_RAW_TROUT     : e := 50.0;
          FISH_RAW_PIKE      : e := 60.0;
          FISH_RAW_SALMON    : e := 70.0;
          FISH_RAW_TUNA      : e := 80.0;
          FISH_RAW_LOBSTER   : e := 90.0;
          FISH_RAW_SWORDFISH : e := 100.0;
          FISH_RAW_SHARK     : e := 110.0;

          else
             MSI_SubDebug('MSI_GetItemExperiences: Invalid object for fishing: ' + IntToStr(Items[i]));
        end;

      SKILL_COOKING:
        case Items[i] of
          FISH_RAW_SHRIMP,
          FISH_RAW_CRAYFISH,
          FISH_RAW_SARDINE,
          FISH_RAW_HERRING,
          FISH_RAW_ANCHOVIE,
          FISH_RAW_TROUT,
          FISH_RAW_PIKE,
          FISH_RAW_SALMON,
          FISH_RAW_TUNA,
          FISH_RAW_LOBSTER,
          FISH_RAW_SWORDFISH,
          FISH_RAW_SHARK        : e := 0.0;
          FISH_COOKED_SHRIMP    : e := 30.0;
          FISH_COOKED_CRAYFISH  : e := 30.0;
          FISH_COOKED_SARDINE   : e := 40.0;
          FISH_COOKED_HERRING   : e := 50.0;
          FISH_COOKED_ANCHOVIE  : e := 30.0;
          FISH_COOKED_TROUT     : e := 70.0;
          FISH_COOKED_PIKE      : e := 80.0;
          FISH_COOKED_SALMON    : e := 90.0;
          FISH_COOKED_TUNA      : e := 100.0;
          FISH_COOKED_LOBSTER   : e := 120.0;
          FISH_COOKED_SWORDFISH : e := 140.0;
          FISH_COOKED_SHARK     : e := 210.0;
          else
             MSI_SubDebug('MSI_GetItemExperiences: Invalid object for cooking: ' + IntToStr(Items[i]));
        end;

      SKILL_RUNECRAFTING:
        case Items[i] of
          MSI_RUNE_AIR    : e := 5;
          MSI_RUNE_BODY   : e := 7.5;
          MSI_RUNE_MIND   : e := 5.5;
          MSI_RUNE_EARTH  : e := 6.5;
          MSI_RUNE_FIRE   : e := 7;
          MSI_RUNE_WATER  : e := 6;
          MSI_RUNE_CHAOS  : e := 8.5;
          MSI_RUNE_LAW    : e := 9.5;
          MSI_RUNE_COSMIC : e := 8;
          MSI_RUNE_DEATH  : e := 10;
          MSI_RUNE_NATURE : e := 9;
          else
             MSI_SubDebug('MSI_GetItemExperiences: Invalid object for Runecrafting: ' + IntToStr(Items[i]));
        end;


      else
        MSI_SubDebug('MSI_GetItemExperiences: Invalid script skill');
    end;

    Result[i] := e;
  end;
end;

(*
MSI_FreeItem
~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_FreeItem(Which: Integer);

Frees the MSI item 'Which'.  This procedure is called only in MSI_FreeAllItems.

.. note::

  | Author: Naum
  | Last Updated: 03 July 2010 by Naum

Example:

.. code-block:: pascal

  for i := 0 to High(MSI_Items) do
    MSI_FreeItem(i);
*)
Procedure MSI_FreeItem(Which: Integer);
Begin
  Try
    FreeDTM(MSI_Items[Which].DTM);

    With MSI_Items[Which] Do
    Begin
      Name := '';
      UpText := [''];
      DTM := -1;
    End;
  Except End;
End;

(*
MSI_FreeAllItems
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_FreeAllItems;

Frees all of MSI's items.  This procedure is only called in MSI_ScriptTerminate.

.. note::

  | Author: Naum
  | Last Updated: 03 July 2010 by Naum

Example:

.. code-block:: pascal

  MSI_FreeAllItems;
*)
Procedure MSI_FreeAllItems;
var
  I: Integer;
begin
  for I := 0 to High(MSI_Items) do
    MSI_FreeItem(I);
end;

(*
MSI_AddException
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_AddException(Item, Slot: Integer);

Adds the inventory slot 'Slot' to the current player's current script's
Exceptions array. Set's the item's 'Item' InvSlot attribute.  The Exceptions
array is used so the user can add inventory slots they don't want to be dropped
or banked.

.. note::

  | Author: Coh3n
  | Last Updated: 06 December 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_AddException(PICKAXE_RUNE, 28);
*)
procedure MSI_AddException(Item, Slot: Integer);
begin
  with MSI_Players[CurrentPlayer].Scripts[CurrentScript] do
  begin
    // If exception slot already exists, exit
    if (InIntArray(Exceptions, Slot)) then
      Exit;

    SetLength(Exceptions, Length(Exceptions) + 1);
    Exceptions[High(Exceptions)] := Slot;

    // Set the item's inventory slot
    MSI_Items[Item].InvSlot := Slot;

    ClearSameIntegers(Exceptions);

    MSI_SubDebug('Exception Added: ' + MSI_Items[Item].Name + ' in slot ' + IntToStr(Slot));
    MSI_SubDebug('There are now ' + IntToStr(Length(Exceptions)) + ' exceptions');
  end;
end;

(*
MSI_DeleteException
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_DeleteException(Item, Slot: Integer);

Basically works the exact opposite of MSI_AddException.  This is used if a tool
has been equipped, for example.  Set's the item's 'Item' InvSlot attribute back
to 0 (i.e. not in the inventory).

.. note::

  | Author: Coh3n
  | Last Updated: 28 March 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_RemoveException(PICKAXE_RUNE, 28);
*)
procedure MSI_DeleteException(Item, Slot: Integer);
var
  i: Integer;
begin
  with MSI_Players[CurrentPlayer].Scripts[CurrentScript] do
    if (not InIntArray(DontDrop, Slot)) then
      if (InIntArrayEx(Exceptions, i, Slot)) then
      begin
        DeleteValueInIntArray(Exceptions, i);
        MSI_Items[Item].InvSlot := 0; // Reset the item's inventory slot

        MSI_SubDebug('Exception Removed: ' + MSI_Items[Item].Name + ' in slot ' + IntToStr(Slot));
        MSI_SubDebug('There are now ' + IntToStr(Length(Exceptions)) + ' exceptions');
      end;
end;

(*
MSI_FindItemSlots
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FindItemSlots(Item: Integer): TIntegerArray;

Returns the slots where the item 'Item' is found.  The type of slots depends on
the current script's BankType attribute.  TBankType can be found in
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Globals.simba>`_.  If the
item found is stackable, and for some reason it's found in more than one slot,
it will perform a series of uptext checks to get rid of the false positives.


.. note::

  | Author: Coh3n
  | Last Updated: 12 November 2010 by Coh3n

Example:

.. code-block:: pascal

  slots := MSI_FindItemSlots(LOGS_NORMAL);
*)
function MSI_FindItemSlots(Item: Integer): TIntegerArray;
var
  i, j, t, c: Integer;
  itemPoints: TPointArray;
  b: TBox;
  bankType: TBank;
  searchArea: string;
begin
  if (MSI_Items[Item].Name = '') or (not LoggedIn) then
    Exit;

  gameTab(TAB_INV);
  c := 0;

  bankType := MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].BankType;
  case bankType of
    Bank, NoBank, Drop: searchArea := 'inv';
    DBox: searchArea := 'deposit box';
  end;

  itemPoints := ItemCoordinates(searchArea, 'dtm', MSI_Items[Item].DTM, []);
  setLength(result, length(itemPoints));

  for i := 0 to High(itemPoints) do
    for j := 1 to 28 do
    begin
      case bankType of
        Bank, NoBank, Drop: b := InvBox(j);
        DBox: b := DepositItemBox(j);
      end;

      if (PointInBox(itemPoints[i], b)) then
      begin
        result[c] := j;
        inc(c);
      end;
    end;

  setLength(result, c);

  // If the item is stackable and more than one is found, will check uptext to remove bad items
  if (MSI_Items[Item].Stackable) then
    if (Length(Result) > 1) then
      for i := 0 to High(itemPoints) do
      begin
        MMouse(itemPoints[i].x, itemPoints[i].y, 4, 4);
        Wait(RandomRange(300, 500));

        if (WaitUptextMulti(MSI_Items[Item].Uptext, 500)) then
          Continue
        else
          if (InIntArrayEx(Result, t, CoordsToItem(itemPoints[i].x, itemPoints[i].y))) then
            DeleteValueInIntArray(Result, t);
      end;

  MSI_Debug('MSI_FindItemSlots: Found '+IntToStr(Length(result))+' '+MSI_Items[Item].Name+' in '+searchArea+' slot(s) ' + ToStr(Result));
end;

(*
MSI_ClickItemSlot
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_ClickItemSlot(Slot: Integer; Options: TStringArray): Boolean;

Clicks the slot 'Slot' and chooses the corrent option from 'Options'.  Will
right-click if the uptext isn't correct.  Like MSI_FindItemSlots, the slot area
depends on the script's BankType attribute.

.. note::

  | Author: Coh3n
  | Last Updated: 21 July 2010 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_ClickItemSlot(1, ['Drop', 'rop']) then
    MSI_Debug('Dropped item');
*)
function MSI_ClickItemSlot(Slot: Integer; Options: TStringArray): Boolean;
var
  x, y: Integer;
  bankType: TBank;
  b: TBox;
begin
  if (not LoggedIn) then
    Exit;

  bankType := MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].BankType;
  case bankType of
    Bank, NoBank, Drop: b := InvBox(Slot);
    DBox: b := DepositItemBox(Slot);
  end;

  if (not FindColor(x, y, SRL_OUTLINE_BLACK, b.x1, b.y1, b.x2, b.y2)) then
  begin
    MSI_SubDebug('Item doesn''t exist in slot ' + IntToStr(Slot));
    Result := True;
    Exit;
  end;

  MMouse((b.x1 + b.x2)/2, (b.y1 + b.y2)/2, 10, 10);
  GetMousePos(x, y);

  if (WaitUpTextMulti(Options, 100 + Random(20))) then
  begin
    Mouse(x, y, 0, 0, True);
    Result := True;
  end else begin
    Mouse(x, y, 0, 0, False);
    Result := WaitOptionMulti(Options, 250 + Random(50));
  end;

  if (not Result) then
    MSI_SubDebug('MSI_ClickItemSlot: Failed to click item slot')
  else
    MSI_SubDebug('MSI_ClickItemSlot: Succesfully clicked item slot');
end;

(*
MSI_ClickItem
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_ClickItem(Item: Integer; Options: TStringArray): Boolean;

Uses a combination of MSI_FindItemSlots and MSI_ClickItemSlot to find and click
the first occurance of the item 'Item'.

.. note::

  | Author: Coh3n
  | Last Updated: 24 April 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_ClickItem(HATCHET_BRONZE, ['Wield', 'ield'])) then
    MSI_Debug('Equipped hatchet');
*)
function MSI_ClickItem(Item: Integer; Options: TStringArray): Boolean;
var
  slots: TIntegerArray;
begin
  if (not LoggedIn) then
    Exit;

  slots := MSI_FindItemSlots(Item);
  if (Length(slots) > 0) then
    Result := MSI_ClickItemSlot(slots[0], Options)
  else
    MSI_SubDebug(MSI_Items[Item].Name + ' not found!');

  if (not Result) then
    MSI_SubDebug('MSI_ClickItem: Failed to click item: '+MSI_Items[Item].Name)
  else
    MSI_SubDebug('MSI_ClickItem: Succesfully clicked ' + MSI_Items[Item].Name);
end;

(*
MSI_ClickItem
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_ClickItem(Item: Integer; Options: TStringArray): Boolean;

Works exactly like MSI_ClickItem, except for multiple items.  This function is
primarily used for banking.

.. note::

  | Author: Coh3n
  | Last Updated: 11 July 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_ClickItems([ROCK_COPPER, ROCK_TIN]. ['Deposit', 'eposit']);
*)
procedure MSI_ClickItems(Items: TIntegerArray; Options: TStringArray);
var
  i, j: Integer;
  slots: TIntegerArray;
begin
  if (not LoggedIn) then
    Exit;

  for i := 0 to High(Items) do
  begin
    slots := MSI_FindItemSlots(Items[i]);
    for j := 0 to High(slots) do
      MSI_ClickItemSlot(slots[j], Options);
  end;
end;

(*
MSI_DragItem
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_DragItem(Item, TargetSlot: Integer): Boolean;

Drags the first occurance of the item 'Item' to the inventory slot 'TargetSlot'.

.. note::

  | Author: Zyt3x
  | Last Updated: 13 October 2010 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_DragItem(PICKAXE_RUNE, 28)) then
    MSI_Debug('Dragged pickaxe to preferred slot');
*)
function MSI_DragItem(Item, TargetSlot: Integer): Boolean;
var
  slots: TIntegerArray;
begin
  if (not LoggedIn) then
    Exit;

  Result := True;
  slots := MSI_FindItemSlots(Item);
  if (Length(slots) > 0) then
    DragItem(slots[0], TargetSlot)
  else begin
    MSI_SubDebug(MSI_Items[Item].Name + ' not found!');
    Result := False;
    Exit;
  end;

  if (not Result) then
    MSI_SubDebug('MSI_DragItem: Failed to click item: '+MSI_Items[Item].Name)
  else
    MSI_SubDebug('MSI_DragItem: Succesfully clicked ' + MSI_Items[Item].Name);
end;

(*
MSI_EquipItem
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_EquipItem(Skill, Item: Integer): Boolean;

Equips the item 'Item' if the player has the required skill level of 'Skill' to
do so.

.. note::

  | Author: Coh3n
  | Last Updated: 28 March 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_EquipItem(SKILL_ATTACK, PICKAXE_STEEL)) then
    MSI_Debug('Equipped pickaxe');
*)
function MSI_EquipItem(Skill, Item: Integer): Boolean;
var
  slot, lev, t, x, y: Integer;
begin
  if (not LoggedIn) then
    Exit;

  if (MSI_Items[Item].EquipLevel < 0) then
  begin
    MSI_SubDebug(MSI_Items[Item].Name+' is not equippable');
    Exit;
  end;

  // Get the player's skill level
  if (Skill <> -1) then
  begin
    {$IFDEF REFLECTION}
    lev := R_GetSkillLevel(Skill);
    {$ELSE}
    lev := GetSkillLevel(Skill);
    {$ENDIF}
  end;

  MSI_AddHeader('MSI_EquipItem');
  MSI_Debug('Attempting to equip '+Capitalize(MSI_Items[Item].Name));

  if (lev >= MSI_Items[Item].EquipLevel) then
    if (MSI_ClickItem(Item, ['Wield', 'ield', 'eld', 'Wear', 'ear'])) then
    begin
      // Get the inventory slot that was clicked
      GetMousePos(x, y);
      slot := CoordsToItem(x, y);

      // Wait for the item to disappear from inventory (i.e. equipped)
      t := (GetSystemTime + 5000);
      while (GetSystemTime < t) do
      begin
        if (not ExistsItem(slot)) then
        begin
          Result := True;
          MSI_DeleteException(Item, slot);
          MSI_Debug('Equipped '+Capitalize(MSI_Items[Item].Name));
          Break;
        end;

        Wait(RandomRange(250, 500));
      end;

    end else
      MSI_Debug(MSI_Items[Item].Name+' is not in slot '+ToStr(MSI_Items[Item].InvSlot))
  else
    MSI_Debug('Player doesn''t have required level');

  MSI_CloseHeader('MSI_EquipItem: '+BoolToStr(Result));
end;

(*
MSI_FindTool
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FindTool(tool, whichTab: integer; var x, y: integer): boolean;

Returns true if the specified tool (Tool) is found in the game tab (WhichTab).
Sets the items coordinates to x and y.  Uses DTMs to find the item, and adds the
tool to the exceptions array if found in the inventory.

.. note::

  | Author: Coh3n
  | Last Updated: 28 June 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_FindTool(HATCHET_BRONZE, TAB_INV, x, y)) then
    MSI_Debug('Found ' + MSI_Items[HATCHET_BRONZE].Name);
*)
function MSI_FindTool(tool, whichTab: integer; var x, y: integer): boolean;
var
  s: string;
  toolFound: boolean;
  tools: TPointArray;
begin
  if (not loggedIn) then
    exit;

  gameTab(whichTab);
  result := false;

  MSI_AddHeader('MSI_FindTool');

  if (whichTab = TAB_INV) then
  begin
    s := 'Inventory';
    tools := itemCoordinates('inv', 'dtm', MSI_Items[tool].DTM, []);
    if (length(tools) > 0) then
    begin
      toolFound := true;
      x := tools[0].x;
      y := tools[0].y;
    end;
  end else begin
    s := 'Equipment';
    toolFound := FindDTM(MSI_Items[tool].DTM, x, y, MIX1, MIY1, MIX2, MIY2);
  end;

  MSI_Debug('Searching ' + s + ' tab');

  if (toolFound) then
  begin
    result := true;
    MSI_Debug('Found DTM of ' + MSI_Items[tool].name);

    if (whichTab = TAB_INV) then
      if (not MSI_EquipItem(SKILL_ATTACK, tool)) then
        MSI_AddException(tool, coordsToItem(x, y));
  end else
		MSI_Debug('Failed to find DTM of ' + MSI_Items[tool].name);

  MSI_CloseHeader('MSI_FindTool: ' + boolToStr(result))
end;

(*
MSI_DropAll
~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_DropAll;

Uses SRL's dropping routines to drop all items in the inventory with the
exception of the Exceptions array for the current script.

.. note::

  | Author: Coh3n
  | Last Updated: 06 December 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_DropAll;
*)
procedure MSI_DropAll;
var
  i: Integer;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_DropAll');

  with MSI_Players[CurrentPlayer].Scripts[CurrentScript] do
  begin
    if (Length(DontDrop) > 0) then
      for i := 0 to High(DontDrop) do
        Exceptions := CombineIntArray(Exceptions, MSI_FindItemSlots(DontDrop[i]));

    ClearSameIntegers(Exceptions);
    if (Length(Exceptions) <= 0) then
      DropAll
    else
      DropAllExcept(Exceptions);
  end;

  MSI_CloseHeader('MSI_DropAll: Finished');
end;

(*
MSI_WaitItemGone
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WaitItemGone(item: TItem): boolean;

Waits until the item 'item' is no longer found in the inventory.

.. note::

  | Author: NCSD & Coh3n
  | Last Updated: 02 July 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_WaitItemGone(FISH_RAW_TROUT)) then
    MSI_Debug('We are done cooking');
*)
function MSI_WaitItemGone(item: TItem): boolean;
var
  t, tt, howMany: Integer;
begin
  if (not loggedIn) then
    exit;

  MSI_AddHeader('MSI_WaitItemGone');

  t := (getSystemTime + 180000);
  repeat
    howMany := countItems('dtm', item.DTM, []);

    tt := (getSystemTime + 5000);
    while (getSystemTime < tt) do
    begin
      if (countItems('dtm', item.DTM, []) = 0) then
      begin
        result := true;
        break;
      end;

      MSI_FindRandoms(false);
      MSI_AntiBan(randomRange(0, 7000), ANTI_BAN_CHANCE);

      wait(1000);
    end;

    if (not result) then
      if (countItems('dtm', item.DTM, []) >= howMany) then
      begin
        MSI_Debug('We''ve stopped converting the material');
        result := false;
        break;
      end;
  until(result or (getSystemTime > t) or (not loggedIn));

  MSI_CloseHeader('MSI_WaitItemGone: ' + boolToStr(result));
end;

(*
MSI_UseItemOn
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_UseItemOn(item: integer; objs: TIntegerArray): boolean;

Uses an item ('item') on a main screen object ('objs').  Will look for the
first object in 'objs' first.

.. note::

  | Author: NCDS & Coh3n
  | Last Updated: 09 June 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_UseItemOn(FISH_RAW_TROUT, COOKSPOT_AK_RANGE)) then
    MSI_Debug('Starting to cook');
*)
function MSI_UseItemOn(item: integer; objs: TIntegerArray): boolean;
var
  x, y: integer;
  oo: TMSObjectArray;
  o: TMSObject;
begin
  if (not loggedIn) then
    exit;

  if (not FindColor(x, y, SRL_OUTLINE_WHITE, MIX1, MIY1, MIX2, MIY2)) then
  begin
    if (not MSI_ClickItem(item, ['Use', 'se'])) then
      exit;
  end else
    MSI_SubDebug('MSI_UseItemOn: Item already selected');

  oo := MSI_GetObjects(objs);
  result := MSI_FindObjects(oo, moLeft, o);
end;


