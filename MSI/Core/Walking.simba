(*
Walking
=======

The Walking file includes functions & procedures that have anything to do with
walking. You'll notice the defines ({$IFDEF REFLECTION}) used throughout these
methods; these are used so MSI will still compile if the user decides to exclude
reflection or if reflection is broken. This file handles walking for both SPS
and reflection.

The source for Walking.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Walking.simba>`_.

*)

(*
MSI_Flag
~~~~~~~~

.. code-block:: pascal

  procedure MSI_Flag(FlagDist: Integer);

MSI's custom flag function. It waits until the flag is within 'FlagDist' from
the player. It also works if, for some reason, the flag has gone off the minimap,
but the player is still moving.

.. note::

  | Author: The MSI Team
  | Last Updated: 26 January 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_WalkToPoint(MSI_GetWalkCoords(0))) then
    MSI_Flag(MIN_FLAG_DISTANCE); // MIN_FLAG_DISTANCE is found in Globals.simba
*)
procedure MSI_Flag(FlagDist: Integer);
var
  t: Integer;
begin
  if (not LoggedIn) then
    Exit;

  repeat
    if (LeaveDangerZone) then
      MSI_Debug('Left danger zone');

    Wait(RandomRange(200, 500));
    t := (GetSystemTime + 12000);

    // If the player is going around an obstacle and the flag goes off the minimap
    if ((not FlagPresent) and (IsMoving)) then
    begin
      MSI_Antiban(RandomRange(300, 1000), ANTI_BAN_CHANCE);
      Continue;
    end;

    if (FlagDistance <= FlagDist) or (not IsMoving) then
      Exit;

    MSI_FindRandoms(False);
    MSI_AntiBan(RandomRange(200, 800), ANTI_BAN_CHANCE);

    MSI_SubDebug('Flag distance: '+IntToStr(FlagDistance));

  until((not (FlagPresent)) and (not (IsMoving))) or (t < GetSystemTime);
end;

(*
MSI_WaitTile
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WaitTile(Tile: TPoint): Boolean;

Simple, yet effective function used as a substitute for Flag functions.
MSI_WaitTile returns true with 'Tile' is on the minimap. See MSI_WalkTile to
see exactly how it's used.

.. note::

  | Author: Coh3n
  | Last Updated: 26 January 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_ClickTile(i)) then
    MSI_WaitTile(i + 1); // Waits for the next tile in the path
*)
function MSI_WaitTile(Tile: TPoint): Boolean;
{$IFDEF REFLECTION}
var
  t: Integer;
{$ENDIF}
begin
  result := false;

  if (not LoggedIn) then
    Exit;

  {$IFDEF REFLECTION}
  t := GetSystemTime + 15000; // Maximum wait time is 15 seconds
  repeat
    clickNorth(true);

    if (LeaveDangerZone) then
      MSI_Debug('Left danger zone');

    if (tileOnMM(tile)) then
    begin
      result := true;
      break;
    end;

    MSI_WaitWhileResting;
    MSI_FindRandoms(False);
    MSI_AntiBan(RandomRange(200, 800), ANTI_BAN_CHANCE);
    Wait(RandomRange(200, 300));
  until(Result or (GetSystemTime > t) or (not LoggedIn));
  {$ENDIF}
end;

(*
MSI_ClickTile
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_ClickTile(Tile: TPoint): Boolean;

Checks to see if the player is near 'Tile', if so, returns true, otherwise it
will verify the tile is on the minimap and return true when clicked.

.. note::

  | Author: marpis
  | Last Updated: 27 March 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_ClickTile(Point(1234, 4321))) then
    MSI_Debug('Clicked tile');
*)
function MSI_ClickTile(Tile: TPoint): Boolean;
{$IFDEF REFLECTION}
var
  MP: TPoint;
{$ENDIF}
begin
  result := false;

  if (not LoggedIn) then
    Exit;

  {$IFDEF REFLECTION}
  MP := TileToMM(Tile);

  if (Distance(MP.X, MP.Y, MMCX, MMCY) <= 5) then
  begin
    MSI_Debug('Already near tile');
    Result := True;
    Exit;
  end;

  if (TileOnMM(Tile)) then
  begin
    Result := MSI_MultiMouse(MP.X, MP.Y, 40, 4, false);
    RunEnergy(40);
  end;
  {$ENDIF}
end;

(*
MSI_PointOnMM
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_PointOnMM(p: TPoint; var Coord: TPoint): Boolean;

Returns try if the point, p, is on the minimap. P can be a tile or an SPS point.
The coordinates on the minimap are set to 'Coord'.

.. note::

  | Author: Coh3n
  | Last Updated: 27 February 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_PointOnMM(Path[i], p)) then
    Mouse(p.x, p.y, 3, 3, True);
*)
function MSI_PointOnMM(p: TPoint; var Coord: TPoint): Boolean;
begin
  if (not LoggedIn) then
    Exit;

  if (MSI_HookBroken[HOOK_WALKING]) then
    {$IFDEF SPS}
    Coord := SPS_PosToMM(p)
    {$ELSE}
    Wait(50)
    {$ENDIF}
  else
    {$IFDEF REFLECTION}
    Coord := TileToMM(p);
    {$ELSE}
    Wait(50);
    {$ENDIF}

  Result := rs_OnMinimap(Coord.x, Coord.y);
  MSI_SubDebug('MSI_PointOnMM'+ToStr(p)+': ' + BoolToStr(Result));
end;

(*
MSI_Relocate
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_Relocate(Loc: Integer): Boolean;

Relocates the player to the location 'Loc'.  Only relocates if the player is
near the location.  Returns true if relocation was successful.

.. note::

  | Author: Sir R. Magician
  | Last Updated: 22 June 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_Relocate(LOC_VE_MINE)) then
    MSI_Debug('Successfully relocated');
*)
function MSI_Relocate(Loc: Integer): Boolean;
var
  i, t, cp: Integer;
  p: TPoint;
  TPA: TPointArray;
  atTile: boolean;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_Relocate');

  if (MSI_HookBroken[HOOK_WALKING]) then
  begin
    TPA := MSI_Locations[Loc].Points
  end else
    TPA := MSI_Locations[Loc].Tiles;

  if (Length(TPA) = 0) then
  begin
    MSI_SubDebug('No relocation points for ' + MSI_Locations[Loc].Name);
    Exit;
  end;

  cp := MSI_Players[CurrentPlayer].CurrentPoint;
  if (cp = High(TPA)) then
  begin
    InvertTPA(TPA);
    cp := High(TPA) - cp;
  end;
  MSI_Players[CurrentPlayer].CurrentPoint := cp;

  t := (GetSystemTime + 10000);
  while (not Result) and (LoggedIn) and (GetSystemTime < t) do
  begin
    for i := cp to High(TPA) do
    begin
      if (not MSI_PointOnMM(TPA[i], p)) then
      begin
        if (MSI_FindRandoms(True)) then
        begin
          result := true;
          MSI_CloseHeader('MSI_Relocate: ' + boolToStr(result));
          exit;
        end;

        wait(RandomRange(200, 300));

        if ((i = high(TPA)) and (atTile)) then
        begin
          result := true;
          break;
        end else
          if (i = high(TPA)) then
            break;

        Continue;
      end;

      if (Distance(p.x, p.y, MMCX, MMCY) > MSI_Locations[Loc].MinDistance) then
      begin
        Mouse(p.x, p.y, 4, 4, True);
        MSI_Debug('Walking to Point(' + IntToStr(p.x) + ', ' + IntToStr(p.y) + ')');
        MSI_Flag(0);
        Result := True;
        Break;
      end else begin
        atTile := true;
        if (i = High(TPA)) then
        begin
          MSI_Debug('Already at ' + MSI_Locations[Loc].Name + ' Point('+IntToStr(i)+')');
          Result := True;
        end;
      end;
    end;

    if (not Result) then
      cp := 0
    else
      cp := i;
  end;

  MSI_Players[CurrentPlayer].CurrentPoint := cp;
  MSI_CloseHeader('MSI_Relocate: ' + BoolToStr(Result));
end;

(*
MSI_AtLocation
~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_AtLocation(Loc: Integer; Relocate: Boolean): Boolean;

Returns true if the player is at the location 'Loc'.  Works with both reflection
and SPS. If the player isn't at the location and 'Relocate' is set to true,
will call MSI_Relocate.

.. note::

  | Author: Coh3n
  | Last Updated: 27 April 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_AtLocation(LOC_VE_BANK, True)) then
    MSI_Debug('We are at Varrock East Bank');
*)
function MSI_AtLocation(Loc: Integer; Relocate: Boolean): Boolean;
var
  i, d: Integer;
  p: TPoint;
  TPA: TPointArray;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_AtLocation');

  if (Loc = LOC_POWER_SKILL) then
  begin
    MSI_Debug('We are powerskilling, we have no specific location');
    Result := True;
  end;

  if (not Result) then
  begin
    if (MSI_HookBroken[HOOK_WALKING]) then
    begin
      TPA := MSI_Locations[Loc].Points
    end else
      TPA := MSI_Locations[Loc].Tiles;

    for i := 0 to High(TPA) do
    begin
      MSI_Debug('Checking Point: ' + ToStr(TPA[i]));

      if (MSI_PointOnMM(TPA[i], p)) then
      begin
        d := Distance(p.x, p.y, MMCX, MMCY);
        MSI_Debug('Distance from player to ' + MSI_Locations[Loc].Name + ': ' + IntToStr(d));

        Result := (d <= MSI_Locations[Loc].MinDistance);
        if (not Result) and (Relocate) then
          Result := MSI_Relocate(Loc);

        if (Result) then
        begin
          MSI_Debug('Player is at ' + MSI_Locations[Loc].Name);
          MSI_Players[CurrentPlayer].Location := MSI_Locations[Loc].Constant;
          Break;
        end;
      end;
    end;
  end;

  if (not Result) then
    MSI_Debug('Player not at ' + MSI_Locations[Loc].Name);

  MSI_CloseHeader('MSI_AtLocation: ' + BoolToStr(Result));
end;

(*
MSI_GetCorrectPath
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_GetCorrectPath(path: TPath; color, toLoc: boolean): T2DPointArray;

Will get the correct path from the 'path' record.  If 'color', will return the
SPS coords, else return Reflection tiles.  if 'toLoc', will invert the path's
Reflection or SPS paths.

.. note::

  | Author: Coh3n
  | Last Updated: 21 July 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_GetCorrectPath(MSI_Scripts[SCRIPT_VE_MINE].PathInfo, MSI_HookBroken[HOOK_WALKING], True);
*)
function MSI_GetCorrectPath(path: TPath; color, toLoc: boolean): T2DPointArray;
var
  s: string;
begin
  if (not loggedIn) then
    exit;

  if (toLoc) then                // Start loc -> End loc
    if (color) then
      result := path.color
    else
      result := path.reflection
  else                           // End loc -> Start loc
    if (color) then
      result := MSI_MirrorATPA(path.color)
    else
      Result := MSI_MirrorATPA(path.reflection);

  if (color) then
    s := 'Color'
  else
    s := 'Reflection';

  MSI_SubDebug(s+' Path: '+toStr(result));
end;

(*
MSI_WalkColorPath
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WalkColorPath(Points: TPointArray): Boolean;

Uses SPS's path walking to walk the path specified by 'Points'.  Each script's
path is defined with the script's record in Scripts.simba.

.. note::

  | Author: Coh3n
  | Last Updated: 27 February 2011 by Coh3n

Example:

.. code-block:: pascal

  with MSI_Players[CurrentPlayer] do
    MSI_WalkColorPath(Scripts[CurrentScript].PathInfo.Color);
*)
function MSI_WalkColorPath(Points: TPointArray): Boolean;
begin
  if (not LoggedIn) then
    Exit;

  result := false;

  {$IFDEF SPS}
  Result := SPS_WalkPath(Points);
  {$ENDIF}
end;

(*
MSI_WalkTilePath
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WalkTilePath(TPA: TPointArray): Boolean;

Walks the entire tile path (tPath). Uses MSI_WaitTile for every tile except the
last one (uses MSI_Flag(0) instead) to ensure the player has stopped moving
before searching for objects on the mainscreen.

.. note::

  | Author: marpis & Coh3n
  | Last Updated: 23 June 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_WalkTilePath(TilePathHere)) then
    MSI_Debug('Walked path');
*)
function MSI_WalkTilePath(TPA: TPointArray): Boolean;
{$IFDEF REFLECTION}
var
  h, i, t: Integer;
  mPos: TPoint;
  stopMoving: Boolean;
{$ENDIF}
begin
  result := false;

  if (not LoggedIn) then
    Exit;

  {$IFDEF REFLECTION}
  with MSI_Players[CurrentPlayer] do
  begin
    t := GetSystemTime + (Length(TPA) * 60 + 180) * 1000; // A minute for each tile + 3 minutes
    h := High(TPA);
    MSI_Debug('High TPA: ' + toStr(h));

    repeat
      for i := h downto 0 do
      begin
        stopMoving := (i = h);

        if (not MSI_ClickTile(TPA[i])) then
        begin
          if (i = 0) then
            break;

          Continue;
        end else begin
          MSI_Debug('Clicked TPA['+toStr(i)+']: '+toStr(TPA[i]));

          if (stopMoving) then
          begin
            clickNorth(true);
            MSI_Flag(10);
          end else
            MSI_WaitTile(TPA[i + 1]);
        end;

        mPos := GetMyPos;
        Result := (Distance(mPos.x, mPos.y, TPA[h].x, TPA[h].y) <= 10);
        Break;
      end;

      if ((not result) and (i = 0)) then
      begin
        MSI_Debug('No points are on the minimap');
        break;
      end;
    until(Result or (GetSystemTime > t));
  end;
  {$ENDIF}
end;

(*
MSI_WalkPath
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WalkPath(pathInfo: TPath; toLoc: boolean): boolean;

Walks the entire path (PathInfo), including obstacles. Returns true if the
player is at the ending location. 'inverted' is used to determine which
obstacles to load since they may be different depending on the player's
location.

.. note::

  | Author: marpis & Coh3n
  | Last Updated: 21 July 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_WalkPath(MSI_Scripts[SCRIPT_VE_MINE].PathInfo, true);
*)
function MSI_WalkPath(pathInfo: TPath; toLoc: boolean): boolean;
var
  ATPA: T2DPointArray;
  eTPA: TPointArray;
  walked: function(TPA: TPointArray): Boolean;
  i, h, t, endLocation: integer;
  done: boolean;
  intObs: TIntegerArray;
  obs: TObstacle;
begin
  if (not loggedIn) then
    exit;

  MSI_AddHeader('MSI_WalkPath');

  if (MSI_HookBroken[HOOK_WALKING]) then
  begin
    ATPA := MSI_GetCorrectPath(pathInfo, true, toLoc);
    eTPA := MSI_MirrorTPA(MSI_Locations[pathInfo.endLoc].points);
    walked := @MSI_WalkColorPath;
  end else begin
    ATPA := MSI_GetCorrectPath(pathInfo, false, toLoc);
    eTPA := MSI_MirrorTPA(MSI_Locations[pathInfo.endLoc].tiles);
    walked := @MSI_WalkTilePath;
  end;

  // make sure we're passing the right obstacles
  if (toLoc) then
  begin
    endLocation := pathInfo.endLoc;
    intObs := pathInfo.obstacles[OBS_LOC_TO]
  end else begin
    endLocation := pathInfo.startLoc;
    intObs := pathInfo.obstacles[OBS_LOC_FROM];
  end;

  t := (getSystemTime + (length(ATPA) * 60 + 180) * 1000);
  h := high(ATPA);

  while ((not result) and (getSystemTime < t) and (not done)) do
  begin

	  for i := 0 to h do
      with MSI_Players[CurrentPlayer] do
		  begin
        // Walk the leg of the path
			  if (not walked(ATPA[i])) then
          if ((not walked(eTPA)) and (not walked(ATPA[i]))) then
				  begin
            MSI_Debug('Failed to walk path ('+boolToStr(toLoc)+'): ' + pathInfo.name);

            if (i = h) then
            begin
              done := true;
              break;
            end else
              continue;
				  end;

        // Handle the obstacle
        if (length(intObs) > 0) then
          if (i <> h) then // length of obstacles is always 1 less than path ATPA
          begin
            obs := MSI_GetObstacle(intObs[i]);
            if (not MSI_SolveObstacle(obs)) then
            begin
              reportInfo.falseReason := 'Failed to pass obstacle: ' + obs.name;
              MSI_Debug('Failed to pass obstacle: ' + obs.name);
              done := true;
              break;
            end;
          end;

        // Return true if the player is at the ending location
		    if (MSI_AtLocation(endLocation, true)) then
		    begin
		      result := true;
		      break;
		    end;
		  end;

  end;

	MSI_CloseHeader('MSI_WalkPath: ' + boolToStr(result));
end;

(*
MSI_DeathWalk
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_DeathWalk: Boolean;

Attempts to walk to the starting location for each respective script if the
player is lost. Teleports home and walks back if need be.  Keep in mind that
currently this function doesn't support SPS as SPS requires the maps to be
loaded and until we can figure out a fast way to loop through EVERY bitmap, SPS
will not be supported for Death Walking.

.. note::

  | Author: NCDS
  | Last Updated: 21 July 2011 by Coh3n

Example:

.. code-block:: pascal

  if MSI_DeathWalk then
    MSI_Debug('Back on track!');
*)
function MSI_DeathWalk: Boolean;
var
  script: TScript;
  i: integer;
  home: boolean;
  pathInfo: TPath;
(*
  {$IFDEF SPS}
  areas_old: TStringArray;
  {$ENDIF}
*)
begin
  if (not loggedIn) then
    exit;

  MSI_AddHeader('MSI_DeathWalk');

  if (MSI_HookBroken[HOOK_WALKING]) then
  begin
    MSI_Debug('Function not supported without Reflection!');
    MSI_CloseHeader('MSI_DeathWalk: '+boolToStr(result));
    exit;
  end;

  script := MSI_Scripts[MSI_Players[CurrentPlayer].scripts[CurrentScript].name];
  pathInfo := MSI_Locations[script.pathInfo.startLoc].deathPath;

  if (length(pathInfo.reflection) <= 0) then
  begin
    MSI_Debug('No death path for location: '+MSI_Locations[script.pathInfo.startLoc].name);
    MSI_CloseHeader('MSI_DeathWalk: '+boolToStr(result));
    exit;
  end;

(*
  !!!!! See function header as to why these are commented out !!!!!

  // set the SPS areas (set here to increase speed as SPS does take time)
  if (MSI_HookBroken[HOOK_WALKING]) then
  begin
    {$IFDEF SPS}
    areas_old := SPS_Areas;
    SPS_Areas := MSI_Locations[script.pathInfo.startLoc].deathPath.SPSAreas;
    MSI_Debug('New SPS Areas: '+toStr(SPS_Areas));
    SPS_Loaded := false;
    {$ENDIF}
  end;
*)

  // check to see if the player is already in Lumbridge
  home := MSI_AtLocation(LOC_LB_SPAWN, true);

  // tries to walk the path; maybe we're already close to it
  if (not home) then
    result := MSI_WalkPath(pathInfo, true);

  // teleport home!
  if ((not result) and (not home)) then
    if (MSI_ClickSpell(SPELL_TELE_HOME)) then // teleport home
    begin
      MSI_Debug('Waiting to spawn in Lumbridge');

      for i := 1 to 45 do  // 45 seconds
      begin
        wait(1000);
        if (MSI_AtLocation(LOC_LB_SPAWN, false)) then
        begin
          home := true;
          break;
        end;
      end;
    end;

  // Walk back to the script's starting location
  if (not result) then
    if (home) then
    begin
      clickNorth(true);
      result := MSI_WalkPath(pathInfo, true);
    end else begin
      MSI_Debug('Didn''t spawn after 45 seconds');
      result := false;
    end;
(*
  // set areas back to what they were
  if (MSI_HookBroken[HOOK_WALKING]) then
  begin
    {$IFDEF SPS}
    SPS_Areas := areas_old;
    MSI_Debug('New SPS Areas: '+toStr(SPS_Areas));
    SPS_Loaded := false;
    {$ENDIF}
  end;
*)
  MSI_CloseHeader('MSI_DeathWalk: '+boolToStr(result));
end;

(*
MSI_PerformWalk
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_PerformWalk(pathInfo: TPath; toLoc: boolean): boolean;

Will walk the path "pathInfo".  Takes into consideration both color and
reflection paths depending on the user's preference as well as the current
state of reflection.  Also uses MSI's death walking feature.

.. note::

  | Author: Coh3n
  | Last Updated: 21 July 2011 by Coh3n

Example:

.. code-block:: pascal

  // Walks to VE mine only if your player is set to use SCRIPT_VE_MINER
  MSI_PerformWalk(MSI_Scripts[SCRIPT_VE_MINE].PathInfo, true);
*)
function MSI_PerformWalk(pathInfo: TPath; toLoc: boolean): boolean;
begin
  if (not loggedIn) then
    exit;

  MSI_FindRandoms(true);
  result := MSI_WalkPath(pathInfo, toLoc);

  if (not result) then
    if (MSI_DeathWalk) then
      result := MSI_WalkPath(pathInfo, toLoc);

  if (not result) then
    with MSI_Players[currentPlayer] do
      if (toLoc) then
        reportInfo.falseReason := 'FAIL: Walk path '+pathInfo.name
      else
        reportInfo.falseReason := 'FAIL: Walk path (inverted) '+pathInfo.name
end;

