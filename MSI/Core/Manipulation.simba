(*
Manipulation
============

The Manipulation file is for any procedures and/or functions that change
something or converts it to something else. Something like converting a string
array to an integer array.

The source for can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Manipulation.simba>`_.

*)

(*
MSI_ClearFile
~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_ClearFile(FilePath: string);

Deletes all text in file 'FilePath', but leaves the file itself. Used usually
for clearing a file to avoid confusion before rewriting to it.

.. note::

  | Author: Coh3n
  | Last Updated: 11 January 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_ClearFile(PATH_PLAYER); // Clears the Player.txt file used to save form input
*)
procedure MSI_ClearFile(FilePath: string);
var
  f: Integer;
begin
  try
    f := RewriteFile(FilePath, False);
    CloseFile(f);
  except
    MSI_Debug('Error clearing file: ' + FilePath + ' - ' + ExceptionToString(ExceptionType, ExceptionParam));
  end;
end;

(*
MSI_WriteRemote
~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_WriteRemote;

Writes each player's activity and location to a file so it can be read by the
Player Remote extension (msi_player_remote.sex).

.. note::

  | Author: Coh3n
  | Last Updated: 13 May 2011 by Coh3n

Example:

.. code-block:: pascal

  procedure MSI_WriteRemote;
*)
procedure MSI_WriteRemote;
var
  i: Integer;
begin
  case MSI_PointerCall(MSI_OnWriteRemoteCall, []) of
    EXTRA_CONTINUE: ;
    EXTRA_EXIT: Exit;
  end;

  try
    MSI_ClearFile(PATH_REMOTE);

    WriteINI('Changed', 'Changed', 'False', PATH_REMOTE);
    WriteINI('HowMany', 'HowMany', IntToStr(Length(MSI_Players)), PATH_REMOTE);

    for i := 0 to High(MSI_Players) do
      WriteINI(IntToStr(i), 'Active', BoolToStr(MSI_Players[i].Active), PATH_REMOTE);
  except
    MSI_Debug('MSI_WriteINI: Error!');
  end;
end;

(*
MSI_ResetRemote
~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_ResetRemote;

Checks to see if the Player Remote file was updated. If it was, it sets the new
player information and resets the file.

.. note::

  | Author: Coh3n
  | Last Updated: 07 September 2011 by Coh3n

Example:

.. code-block:: pascal

  procedure MSI_ResetRemote;
*)
procedure MSI_ResetRemote;
var
  i: Integer;
begin
  case MSI_PointerCall(MSI_OnResetRemoteCall, []) of
    EXTRA_CONTINUE: ;
    EXTRA_EXIT: Exit;
  end;

  try
    if (StrToBool(ReadINI('Changed', 'Changed', PATH_REMOTE))) then // If updated
      for i := 0 to High(MSI_Players) do
      begin
        MSI_Players[i].Active:= StrToBool(ReadINI(IntToStr(i), 'Active', PATH_REMOTE));
        Players[i].Active := MSI_Players[i].Active;
      end;

    MSI_WriteRemote; // Resets INI
  except
    MSI_Debug('MSI_ResetRemote: ' + ExceptionToString(ExceptionType, ExceptionParam));
  end;
end;

(*
MSI_MirrorTPA
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_MirrorTPA(TPA: TPointArray): TPointArray;

Mirrors the TPA (reverses the order). Used primarily for reverting the
reflection walking paths so one path can be used to walk to and from locations.

.. note::

  | Author: Sir. R. Magician
  | Last Updated: 28 July 2010 by Sir. R. Magician

Example:

.. code-block:: pascal

  reversePath := MSI_MirrorTPA(path);
*)
function MSI_MirrorTPA(TPA: TPointArray): TPointArray;
var
  i, h: integer;
begin
  h := 0;
  setLength(result, length(TPA));

  for i:= high(TPA) downto 0 do
  begin
    result[h] := TPA[i];
    inc(h);
  end;

  setLength(result, h);
end;

(*
MSI_MirrorATPA
~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_MirrorATPA(ATPA: T2DPointArray): T2DPointArray;

Mirrors the ATPA (including the points in the TPAs. Used for reversing MSI's
walking paths as they are 2 dimentional arrays.

.. note::

  | Author: Coh3n
  | Last Updated: 23 June 2011 by Coh3n

Example:

.. code-block:: pascal

  reversePath := MSI_MirrorATPA(path);
*)
function MSI_MirrorATPA(ATPA: T2DPointArray): T2DPointArray;
var
  i, c: Integer;
begin
  setLength(result, length(ATPA));

  for i := high(ATPA) downto 0 do
  begin
    result[c] := MSI_MirrorTPA(ATPA[i]);
    inc(c);
  end;

  setLength(result, c);
  MSI_SubDebug('MSI_MirrorATPA: New ATPA ' + toStr(result));
end;

(*
MSI_ConvertTilePath
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_ConvertTilePath(Tiles: TPointArray): TPointArray;

Converts the tile path 'Tiles' to a path that can be used for SPS.

.. note::

  | Author: Coh3n
  | Last Updated: 23 June 2011 by Coh3n

Example:

.. code-block:: pascal

  SPSPath := MSI_ConvertTilePath(path);
*)
function MSI_ConvertTilePath(Tiles: TPointArray): TPointArray;
{$IFDEF SPS}
var
  i: Integer;
{$ENDIF}
begin
  Result := [];

  {$IFDEF SPS}
  SetLength(Result, Length(Tiles));

  for i := 0 to High(Result) do
    Result[i] := SPS_PointToPixel(Tiles[i]);
  {$ENDIF}
end;

(*
MSI_Convert2DTilePath
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_Convert2DTilePath(Tiles: T2DPointArray): T2DPointArray;

Converts the tile path 'Tiles' to a path that can be used for SPS. Exact same
as MSI_ConvertTilePath, except converts a 2D path.

.. note::

  | Author: Coh3n
  | Last Updated: 23 June 2011 by Coh3n

Example:

.. code-block:: pascal

  SPSPath := MSI_Convert2DTilePath(path);
*)
function MSI_Convert2DTilePath(Tiles: T2DPointArray): T2DPointArray;
var
  i: Integer;
begin
  SetLength(Result, Length(Tiles));

  for i := 0 to High(Result) do
    Result[i] := MSI_ConvertTilePath(Tiles[i]);
end;

(*
MSI_RandomizeArray
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_RandomizeArray(arr: TIntegerArray): TIntegerArray;

Returns the array of integers, 'Objs', in a random order.  This is used so the
user can set MSI's Priority Autoing feature so it will look for one object
(i.e. look for one tree) over another.

.. note::

  | Author: NCDS
  | Last Updated: 20 September 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_FindObject(MSI_GetObject(TREE_NORMAL), moLeft);
*)
function MSI_RandomizeArray(arr: TIntegerArray): TIntegerArray;
var
  i, o: integer;
begin
  setLength(result, length(arr));

  while (length(arr) <> 0) do
    for i := 0 to high(result) do
    begin
      o := random(length(arr));
      result[i] := arr[o];
      deleteValueInIntArray(arr, o);
    end;
end;

(*
MSI_ChooseInteger
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_ChooseInteger(priorities: TIntegerArray): integer;

Chooses an index from 'Priorities' based on the index's value.  The higher the
index value, the higher chance it has of being chosen.

.. note::

  | Author: Sir R. Magician
  | Last Updated: 20 September 2010 by NCDS

Example:

.. code-block:: pascal

  objs := [TREE_NORMAL, TREE_OAK, TREE_WILLOW];
  obj := MSI_ChooseInteger([10, 30, 60]);
  MSI_FindObject(objs[obj], ClickLeft);
*)
function MSI_ChooseInteger(priorities: TIntegerArray): integer;
var
  TIA: TIntegerArray;
  i , sum, currSum: integer;
begin
  setLength(TIA, Length(priorities));
  sum := sumIntegerArray(priorities);

  for i := 0 to high(priorities) do
  begin
    currSum := (currSum + priorities[i]);
    TIA[i] := currSum;
  end;

  sum := (random(sum) + 1);

  for result := 0 to high(TIA) do
    if (sum <= TIA[result]) then
      break;
end;

(*
MSI_RearrangeArray
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_RearrangeArray(arr, priorities: TIntegerArray): TIntegerArray;

Returns the array 'arr' in a rearranged order based on 'priorities'.  Uses a
combination of MSI_RandomizeArray and MSI_ChooseInteger.

.. note::

  | Author: NCDS
  | Last Updated: 20 September 2010 by Coh3n

Example:

.. code-block:: pascal

  objs := MSI_RearrangeArray([TREE_NORMAL, TREE_OAK], [30, 70]);
*)
function MSI_RearrangeArray(arr, priorities: TIntegerArray): TIntegerArray;
var
  i, o: Integer;
begin
  setLength(result, length(arr));

  if (length(arr) <> length(priorities)) or (length(priorities) = 0) then
  begin
    result := MSI_RandomizeArray(arr);
    exit;
  end;

  while (length(arr) > 0) do
    for i := 0 to high(Result) do
    begin
      o := MSI_ChooseInteger(priorities);
      result[i] := arr[o];

      deleteValueInIntArray(arr, o);
      deleteValueInIntArray(priorities, o);
    end;
end;

(*
MSI_MakeBox
~~~~~~~~~~~

.. code-block:: pascal

  function MSI_MakeBox(center: TPoint; w, h: integer): TBox;

Creates a box with center point 'center' and width and height 'w' and 'h'.

.. note::

  | Author: Sir R. Magician
  | Last Updated: 07 August 2010 by Coh3n

Example:

.. code-block:: pascal

  MiddleTPA(TPA, x, y);
  with MSI_Objects[TREE_NORMAL] do
    MSI_MakeBox(Point(x, y), W, H); // W/H are TMSObject attributes
*)
function MSI_MakeBox(center: TPoint; w, h: integer): TBox;
begin
  result := intToBox(center.x - (w / 2),
                     center.y - (h / 2),
                     center.x + (w / 2),
                     center.Y + (h / 2));
end;


