(*
Money_Making
============

The Money_Making file holds any procedures/functions that are specific to
money making scripts.  This file will generally hold only the functions that
are pointed to attributes of the TScript record.

The source for Money_Making.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Money_Making.simba>`_.

*)

(*
MSI_SetupSoftener
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SetupSoftener(): Boolean;

Sets the player up to use a Clay Softener script.  This procedure is pointed
to the script's SetupPlayer attribute.

.. note::

  | Author: Coh3n
  | Last Updated: 27 April 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_Scripts[SCRIPT_VE_SOFTENER].SetupPlayer := @MSI_SetupSoftener;
*)
function MSI_SetupSoftener(): Boolean;
begin
  // MSI_SetupCooking is exactly what we need to setup the Clay Softener
  result := MSI_SetupCooking();
end;

(*
MSI_SoftenAll
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SoftenAll(material: TMaterial): Boolean;

Returns true if successfully selected the 'material' option from the selection
screen in the chat box.

.. note::

  | Author: Coh3n
  | Last Updated: 28 April 2011 by Coh3n

Example:

.. code-block:: pascal

  function MSI_SoftenClay(): Boolean;
  begin
    with MSI_Players[CurrentPlayer].Scripts[CurrentScript] do
      Result := MSI_ConvertMaterial(@MSI_SoftenAll, Objects);
  end;
*)
function MSI_SoftenAll(material: TMaterial): boolean;
var
  i, x, y: integer;
begin
  if (waitFunc(@MSI_MaterialScreen, 50, 5000)) then // Wait for the selection screen to appear
    for i := 0 to high(material.produces) do
      if (findDTM(MSI_Items[material.produces[i]].DTM, x, y, MCX1, MCY1, MCX2, MCY2)) then // Look for the material's DTMs in the chat box
      begin
        MMouse(x, y, -25, 25);
        getMousePos(x, y);

        if (waitUpTextMulti(['Make All', 'ake', 'll'], 500)) then
        begin
          Mouse(x, y, 0, 0, true);
          result := true;
          break;
        end;
      end;

  if (result) then
    MSI_SubDebug('Started to convert material: '+material.name);
end;

(*
MSI_SoftenClay
~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SoftenClay(): Boolean;

Returns true if all the clay in the player's inventory have been softened.  This
is the procedure that is pointed to the script's AutoObjects attribute.

.. note::

  | Author: Coh3n
  | Last Updated: 27 April 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_Scripts[SCRIPT_VE_SOFTENER].AutoObjects := @MSI_SoftenClay;
*)
function MSI_SoftenClay(): Boolean;
begin
  with MSI_Players[CurrentPlayer].Scripts[CurrentScript] do
    Result := MSI_ConvertMaterial(@MSI_SoftenAll, Objects); // ConvertMaterial is in Materials.simba
end;

(*
MSI_FillAll
~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FillAll(material: TMaterial): Boolean;

Used as a "parameter filler" for MSI_ConvertMaterial because filling buckets,
bowls, etc. doesn't require any clicking in the Runescape chat box like
softening clay or pottery for example.

.. note::

  | Author: Rich
  | Last Updated: 08 May 2011 by Coh3n

Example:

.. code-block:: pascal

  function MSI_FillItems: Boolean;
  begin
    with MSI_Players[CurrentPlayer].Scripts[CurrentScript] do
      Result := MSI_ConvertMaterial(@MSI_FillAll, Objects);
  end;
*)
function MSI_FillAll(material: TMaterial): Boolean;
begin
  MSI_SubDebug('MSI_FillAll: Material ('+material.name+') doesn''t require further clicking');
  Result := True;
  Wait(500);
end;

(*
MSI_FillItems
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FillItems: Boolean;

Returns true if all the items in the player's inventory have been filled with
water.  This is the procedure that is pointed to the script's AutoObjects
attribute.

.. note::

  | Author: Rich
  | Last Updated: 08 May 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_Scripts[SCRIPT_VE_FILLER].AutoObjects := @MSI_FillItems;
*)
function MSI_FillItems: Boolean;
begin
  with MSI_Players[CurrentPlayer].Scripts[CurrentScript] do
    Result := MSI_ConvertMaterial(@MSI_FillAll, Objects);
end;
