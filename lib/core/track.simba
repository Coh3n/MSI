(*
Track
=====

The Track file holds any functions/procedures that have anything to do with
MSI's tracking system.

The source for Track.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Track.simba>`_.

*)

(**
 * The type which holds the information of a tracked object
 *)
type
  TTrack = record
    Name: string;
    Searches: integer;
    Successes: integer;
  end;

const
  T_TrackObject = 0;

  TRACK_ITEMS = 1;

var
  Tracking: array[0..TRACK_ITEMS] of TTrack;

(*
Track_LoadNames
~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure Track_LoadNames;

Loads the name of all trackable functions (i.e. returns teh names of where MSI
uses function tracking).  This procedure should only be called in MSI_Setup.

.. note::

  | Author: Sir R. Magician
  | Last Updated: 19 September 2010 by Sir R. Magician

Example:

.. code-block:: pascal

  Track_LoadNames;
*)
Procedure Track_LoadNames;
begin
  Tracking[T_TrackObject].Name := 'TrackObject';
end;

(*
Track_Search
~~~~~~~~~~~~

.. code-block:: pascal

  procedure Track_Search(which: Integer);

Simply increments the number of searches for the tracking function 'which' by 1.
This procedure is called at the beginning of a function or procedure that we
want to track.

.. note::

  | Author: Sir R. Magician
  | Last Updated: 19 September 2010 by Sir R. Magician

Example:

.. code-block:: pascal

  Track_Search(T_TrackObject);
*)
Procedure Track_Search(which: integer);
begin
  Inc(Tracking[which].Searches)
end;

(*
Track_Success
~~~~~~~~~~~~~

.. code-block:: pascal

  procedure Track_Success(which: Integer);

Simply increments the number of successes for the tracking function 'which' by
1.  This function is called when a function/procedure we're tracking is
successful.

.. note::

  | Author: Sir R. Magician
  | Last Updated: 19 September 2010 by Sir R. Magician

Example:

.. code-block:: pascal

  Track_Success(T_TrackObject);
*)
Procedure Track_Success(which: integer);
begin
	Inc(Tracking[which].Successes);	  
end;

{
Procedure Track_Result(which: integer; success: boolean);
begin

	Inc(Tracking[which].Searches);

	if success then 
		Inc(Tracking[which].Successes);

	//yes I know this is a hack, but Track_Result actually makes more sense
end;
}

(*
Track_Print
~~~~~~~~~~~

.. code-block:: pascal

  procedure Track_Print(which: Integer);

Prints a tracking report for the tracking function 'which'.

.. note::

  | Author: Sir R. Magician
  | Last Updated: 19 September 2010 by Sir R. Magician

Example:

.. code-block:: pascal

  Track_Print(T_TrackObject);
*)
Procedure Track_Print(which: integer);
begin
  MSI_Debug('~ Track Record');
  MSI_Debug('~ ~ ' + Tracking[which].Name);
  MSI_Debug('~ ~ Searches: ' + IntToStr(Tracking[which].Searches));
  MSI_Debug('~ ~ Successes: ' + IntToStr(Tracking[which].Successes));
  MSI_Debug('~ ~ Success %: ' + FloatToStr(Tracking[which].Successes * 100 / Tracking[which].Searches));
end;

(*
Track_Print
~~~~~~~~~~~

.. code-block:: pascal

  procedure Track_Print(which: Integer);

Prints a tracking report for all MSI's tracking function.

.. note::

  | Author: Sir R. Magician
  | Last Updated: 19 September 2010 by Sir R. Magician

Example:

.. code-block:: pascal

  Track_PrintAll;
*)
Procedure Track_PrintAll;
var
  i: integer;
begin
  for i := TRACK_ITEMS DownTo 0 do
    Track_Print(i);
end;

